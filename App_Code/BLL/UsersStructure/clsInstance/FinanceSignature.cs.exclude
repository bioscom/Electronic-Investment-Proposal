using System;
using System.Collections.Generic;
using System.Web;
using System.Data;
using System.Data.Common;

/// <summary>
/// Summary description for FinanceSignature
/// </summary>
public class FinanceSignature
{
    public FinanceSignature()
    {
        
    }
}

public class FinanceSignatureComments
{
    private string m_sIDPROPOSAL;
    private string m_sCOMMENTS;
    private string m_sDATECOMMENT;
    private string m_sDATERECEIVED;
    private int m_iSTAND;
    private int m_iIDUSERMGT;

    public FinanceSignatureComments()
    {

    }

    public FinanceSignatureComments(string ProposalID)
    {
        string sql = "SELECT IDPROPOSAL, IDUSERMGT, COMMENTS, TO_CHAR(DATE_COMMENT, 'DD-MON-YYYY')DATE_COMMENT, STAND, TO_CHAR(DATE_RECEIVED, 'DD-MON-YYYY')DATE_RECEIVED FROM EIP_FINANCESIGNATURE WHERE IDPROPOSAL = @IDPROPOSAL";
        sql = sql.Replace("@IDPROPOSAL", ProposalID);

        DataTable dt = DataAccess.ExecuteQueryCommand(sql);
        if (dt.Rows.Count > 0)
        {
            m_sIDPROPOSAL = dt.Rows[0]["IDPROPOSAL"].ToString();
            m_sCOMMENTS = dt.Rows[0]["COMMENTS"].ToString();
            m_sDATECOMMENT = dt.Rows[0]["DATE_COMMENT"].ToString();
            m_sDATERECEIVED = dt.Rows[0]["DATE_RECEIVED"].ToString();
            m_iSTAND = Convert.ToInt32(dt.Rows[0]["STAND"]);
            m_iIDUSERMGT = Convert.ToInt32(dt.Rows[0]["IDUSERMGT"]);
        }
    }

    public string sIDPROPOSAL
    {
        get
        {
            return m_sIDPROPOSAL;
        }
    }

    public string sCOMMENTS
    {
        get
        {
            return m_sCOMMENTS;
        }
    }

    public string sDATECOMMENT
    {
        get
        {
            return m_sDATECOMMENT;
        }
    }

    public string sDATERECEIVED
    {
        get
        {
            return m_sDATERECEIVED;
        }
    }

    public int iSTAND
    {
        get
        {
            return m_iSTAND;
        }
    }

    public int iIDUSERMGT
    {
        get
        {
            return m_iIDUSERMGT;
        }
    }

    public bool FinanceSignatureStand()
    {
        bool Supported = false;
        if (iSTAND == SupportState.iFinanceApproval)
        {
            Supported = true;
        }
        return Supported;
    }

    private static void AddComment(appUsers CurrentUser, Proposal proposal, string comment, int stand, string dateRev)
    {
        string sql = "UPDATE EIP_FINANCESIGNATURE SET STAND = @STAND, COMMENTS = @COMMENTS, DATE_COMMENT = TO_DATE('" + dateRev + "', 'mm/dd/yyyy') WHERE IDPROPOSAL = @IDPROPOSAL";
        sql = sql.Replace("@STAND", "'" + stand.ToString() + "'");
        sql = sql.Replace("@COMMENTS", "'" + comment.Replace("'", "''") + "'");
        sql = sql.Replace("@IDPROPOSAL", "'" + proposal.IDPROPOSAL + "'");
        DataAccess.ExecuteNonQueryCommand(sql);

        db.AuditTrail(CurrentUser, stand, comment, dateRev, proposal.IDPROPOSAL);
        proposal.ProposalActionTrail(proposal.IDPROPOSAL, CurrentUser);
    }

    public bool FinanceSignatureReceivedIP()
    {
        bool IPFound = false;
        if (sIDPROPOSAL != null)
        {
            IPFound = true;
        }
        return IPFound;
    }

    //returns the Finance Signature that exists for an IP at a time
    public DataTable FinanceSignatureForIP(string ProposalID)
    {
        string sql = "SELECT IDPROPOSAL, IDUSERMGT, COMMENTS, DATE_COMMENT, STAND, DATE_RECEIVED FROM EIP_FINANCESIGNATURE WHERE IDPROPOSAL = @IDPROPOSAL";
        sql = sql.Replace("@IDPROPOSAL", ProposalID);
        return DataAccess.ExecuteQueryCommand(sql);
    }

    public DataTable MyPendingProposal(string UserID)
    {
        string sql = "SELECT EIP_PROPOSAL.IDPROPOSAL, EIP_PROPOSAL.PROJ_NUM, EIP_PROPOSAL.PROJ_TITLE, EIP_USERMGT.FULLNAME AS PROJ_INIT, "; 
        sql += "TO_CHAR(EIP_PROPOSAL.DATE_INIT, 'DD-MON-YYYY') AS DATE_INIT, TO_CHAR(EIP_PROPOSAL.DATE_SUBMIT, 'DD-MON-YYYY') AS DATE_SUBMIT ";
        sql += "FROM EIP_PROPOSAL INNER JOIN ";
        sql += "EIP_USERMGT ON EIP_PROPOSAL.IDUSERMGT = EIP_USERMGT.IDUSERMGT INNER JOIN ";
        sql += "EIP_FINANCESIGNATURE ON EIP_PROPOSAL.IDPROPOSAL = EIP_FINANCESIGNATURE.IDPROPOSAL ";
        sql += "WHERE (EIP_FINANCESIGNATURE.IDUSERMGT = '" + UserID + "') AND (EIP_PROPOSAL.STATUS = '" + IPStatus.Activated + "') AND (EIP_PROPOSAL.DISCONTINUE <> '" + IPStatus.Discontinued + "') ";
        sql += "AND ((EIP_FINANCESIGNATURE.STAND = '" + SupportState.iNotSupported + "') OR (EIP_FINANCESIGNATURE.STAND = '" + SupportState.iStandDefault + "')) ";

        return DataAccess.ExecuteQueryCommand(sql);
    }

    public DataTable MyProposalHistory(string UserID)
    {
        string sql = "SELECT EIP_PROPOSAL.IDPROPOSAL, EIP_PROPOSAL.PROJ_NUM, EIP_PROPOSAL.PROJ_TITLE, ";
        sql += "TO_CHAR(EIP_PROPOSAL.DATE_INIT, 'DD-MON-YYYY')DATE_INIT, EIP_USERMGT.FULLNAME AS PROJ_INIT, ";
        sql += "TO_CHAR(EIP_PROPOSAL.DATE_SUBMIT, 'DD-MON-YYYY')DATE_SUBMIT, EIP_PROPOSAL.DOC_STAND, ";
        sql += "TO_CHAR(EIP_FINANCESIGNATURE.DATE_COMMENT, 'DD-MON-YYYY')DATE_COMMENT FROM EIP_PROPOSAL, EIP_USERMGT, EIP_FINANCESIGNATURE ";
        sql += "WHERE (EIP_USERMGT.IDUSERMGT = EIP_PROPOSAL.IDUSERMGT) AND (EIP_PROPOSAL.IDPROPOSAL = EIP_FINANCESIGNATURE.IDPROPOSAL) ";
        sql += "AND (EIP_FINANCESIGNATURE.IDUSERMGT = :IDUSERMGT) AND (EIP_FINANCESIGNATURE.STAND = :STAND)";

        DbCommand comm = GenericDataAccess.CreateCommand();
        comm.CommandText = sql;

        // create a new parameter
        DbParameter param = comm.CreateParameter();
        param.ParameterName = ":IDUSERMGT";
        param.Value = UserID;
        param.DbType = DbType.Int32;
        comm.Parameters.Add(param);

        param = comm.CreateParameter();
        param.ParameterName = ":STAND";
        param.Value = SupportState.iFinanceApproval;
        param.DbType = DbType.Int32;
        comm.Parameters.Add(param);

        return GenericDataAccess.ExecuteSelectCommand(comm);
    }

    public DataTable GetMyComment(string ProposalID, string UserID)
    {
        string sql = "SELECT EIP_PROPOSAL.PROJ_NUM, EIP_PROPOSAL.PROJ_TITLE, TO_CHAR(EIP_PROPOSAL.DATE_INIT, 'DD-MON-YYYY') AS DATE_INIT, ";
        sql += "TO_CHAR(EIP_PROPOSAL.DATE_SUBMIT, 'DD-MON-YYYY') AS DATE_SUBMIT, EIP_PROPOSAL.JV, EIP_PROPOSAL.SS, EIP_USERMGT.FULLNAME AS PROJ_INIT, ";
        sql += "EIP_AUDITTRAIL.STAND, EIP_AUDITTRAIL.CCOMMENT AS COMMENTS, TO_CHAR(EIP_AUDITTRAIL.DDATE, 'DD-MON-YYYY') AS DATE_COMMENT ";
        sql += "FROM EIP_PROPOSAL INNER JOIN ";
        sql += "EIP_USERMGT ON EIP_PROPOSAL.IDUSERMGT = EIP_USERMGT.IDUSERMGT INNER JOIN ";
        sql += "EIP_AUDITTRAIL ON EIP_PROPOSAL.IDPROPOSAL = EIP_AUDITTRAIL.IDPROPOSAL INNER JOIN ";
        sql += "EIP_USERMGT EIP_USERMGT_1 ON EIP_AUDITTRAIL.IDUSERMGT = EIP_USERMGT_1.IDUSERMGT INNER JOIN ";
        sql += "EIP_FINANCESIGNATURE ON EIP_USERMGT_1.IDUSERMGT = EIP_FINANCESIGNATURE.IDUSERMGT ";
        sql += "AND EIP_USERMGT_1.IDUSERMGT = '" + UserID + "' AND EIP_PROPOSAL.IDPROPOSAL = '" + ProposalID + "'";

        return DataAccess.ExecuteQueryCommand(sql);
    }

    public DataTable ServiceLevelAgreement()
    {
        string sql = "SELECT EIP_FINANCESIGNATURE.IDPROPOSAL, EIP_FINANCESIGNATURE.IDUSERMGT, EIP_FINANCESIGNATURE.STAND, EIP_FINANCESIGNATURE.DATE_RECEIVED ";
        sql += "FROM EIP_FINANCESIGNATURE INNER JOIN EIP_PROPOSAL ON EIP_FINANCESIGNATURE.IDPROPOSAL = EIP_PROPOSAL.IDPROPOSAL ";
        sql += "WHERE (EIP_FINANCESIGNATURE.STAND = '" + SupportState.iSupportApproverStandDefault + "') AND (EIP_PROPOSAL.STATUS = '" + IPStatus.Activated + "')";
        
        return DataAccess.ExecuteQueryCommand(sql);
    }

    public static bool FinanceSignatureAddCommentProcedure(appUsers CurrentUser, Proposal proposal, string comment, int stand, string dateRev)
    {
        bool success = false;
        SendMail MyMail = new SendMail();
        string[] BPOEmail = { "" };
        string[] IPInitiatorMail = { "" };
        IPInitiator IPInit = new IPInitiator(proposal.IDUSERMGT);
        BusinessProcessOwner BPO = new BusinessProcessOwner(IPInit.iCompanyID);
        IPInitiatorMail[0] = IPInit.sUserMail;
        EPGIPTrackerComment IPTracker = new EPGIPTrackerComment();

        if (CurrentUser.iUSERROLESID == eipUserRoles.iFinanceSignature)
        {
            
        }

        IPTracker.MailEPGIPTracker(proposal, CurrentUser.sUSERMAIL);
        return success;
    }
}