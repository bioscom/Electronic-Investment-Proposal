using System;
using System.Collections.Generic;
using System.Text;
using System.Data;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;

public class LineTeamLead
{
    private string m_sUserId;
    private string m_sFullName;
    private string m_sUserMail;


    public LineTeamLead()
    {

    }

    public LineTeamLead(string _sFunctionID, string _sCompanyID)
    {
        string sql = "SELECT FULLNAME, USERMAIL, IDUSERMGT FROM EIP_USERMGT WHERE FUNCTIONID = '" + _sFunctionID + "' ";
        sql += "AND COMPANYID = '" + _sCompanyID + "' AND USERROLESID = '" + eipUserRoles.iLineTeamLead + "' AND STATUS = '" + IPStatus.Activated + "'";

        DataTable dt = DataAccess.ExecuteQueryCommand(sql);
        if (dt.Rows.Count > 0)
        {
            m_sUserId = dt.Rows[0]["IDUSERMGT"].ToString();
            m_sFullName = dt.Rows[0]["FULLNAME"].ToString();
            m_sUserMail = dt.Rows[0]["USERMAIL"].ToString();
        }
    }

    public LineTeamLead(string UserID)
    {
        string sql = "SELECT FULLNAME, USERMAIL, IDUSERMGT FROM EIP_USERMGT WHERE IDUSERMGT = '" + UserID + "' AND STATUS = '" + IPStatus.Activated + "'";
        DataTable dt = DataAccess.ExecuteQueryCommand(sql);
        if (dt.Rows.Count > 0)
        {
            m_sUserId = dt.Rows[0]["IDUSERMGT"].ToString();
            m_sFullName = dt.Rows[0]["FULLNAME"].ToString();
            m_sUserMail = dt.Rows[0]["USERMAIL"].ToString();
        }
    }

    public string sUserId
    {
        get
        {
            return m_sUserId;
        }
    }

    public string sFullName
    {
        get
        {
            return m_sFullName;
        }
    }

    public string sUserMail
    {
        get
        {
            return m_sUserMail;
        }
    }
}


public class LineTeamLeadComments
{
    private string m_sIDPROPOSAL;
    private string m_sCOMMENTS;
    private string m_sDATECOMMENT;
    private string m_sDATERECEIVED;
    private int m_iSTAND;
    private int m_iUserId;

    public LineTeamLeadComments()
    {

    }

    public LineTeamLeadComments(string ProposalID)
    {
        string sql = "SELECT IDPROPOSAL, IDUSERMGT, COMMENTS, TO_CHAR(DATE_COMMENT, 'DD-MON-YYYY')DATE_COMMENT, STAND, TO_CHAR(DATE_RECEIVED, 'DD-MON-YYYY')DATE_RECEIVED FROM EIP_LINETEAMLEAD WHERE IDPROPOSAL = @IDPROPOSAL";
        sql = sql.Replace("@IDPROPOSAL", "'" + ProposalID + "'");

        DataTable dt = DataAccess.ExecuteQueryCommand(sql);
        if (dt.Rows.Count > 0)
        {
            m_sIDPROPOSAL = dt.Rows[0]["IDPROPOSAL"].ToString();
            m_sCOMMENTS = dt.Rows[0]["COMMENTS"].ToString();
            m_sDATECOMMENT = dt.Rows[0]["DATE_COMMENT"].ToString();
            m_sDATERECEIVED = dt.Rows[0]["DATE_RECEIVED"].ToString();
            m_iSTAND = Convert.ToInt32(dt.Rows[0]["STAND"]);
            m_iUserId = Convert.ToInt32(dt.Rows[0]["IDUSERMGT"]);
        }
    }

    public string sIDPROPOSAL
    {
        get
        {
            return m_sIDPROPOSAL;
        }
    }

    public string sCOMMENTS
    {
        get
        {
            return m_sCOMMENTS;
        }
    }

    public string sDATECOMMENT
    {
        get
        {
            return m_sDATECOMMENT;
        }
    }

    public string sDATERECEIVED
    {
        get
        {
            return m_sDATERECEIVED;
        }
    }

    public int iSTAND
    {
        get
        {
            return m_iSTAND;
        }
    }

    public int iUserId
    {
        get
        {
            return m_iUserId;
        }
    }

    public bool LineTeamLeadStand()
    {
        bool Supported = false;
        if (iSTAND == SupportState.iSupported)
        {
            Supported = true;
        }
        return Supported;
    }

    private static void AddComment(appUsers CurrentUser, Proposal proposal, string comment, int stand, string dateRev)
    {
        SendMail MyMail = new SendMail();
        string sql = "UPDATE EIP_LINETEAMLEAD SET STAND = @STAND, COMMENTS = @COMMENTS, DATE_COMMENT = TO_DATE('" + dateRev + "', 'mm/dd/yyyy') WHERE IDPROPOSAL = @IDPROPOSAL";
        sql = sql.Replace("@STAND", "'" + stand.ToString() + "'");
        sql = sql.Replace("@COMMENTS", "'" + comment.Replace("'", "''") + "'");
        sql = sql.Replace("@IDPROPOSAL", "'" + proposal.IDPROPOSAL + "'");
        DataAccess.ExecuteNonQueryCommand(sql);

        db.AuditTrail(CurrentUser, stand, comment, dateRev, proposal.IDPROPOSAL);

        proposal.ProposalActionTrail(proposal.IDPROPOSAL, CurrentUser);
    }

    

    public bool LineTeamLeadReceivedIP()
    {
        bool IPFound = false;
        if (sIDPROPOSAL != null)
        {
            IPFound = true;
        }
        return IPFound;
    }

    public DataTable MyPendingProposal(string UserID)
    {
        string sql = "SELECT EIP_PROPOSAL.IDPROPOSAL, EIP_PROPOSAL.PROJ_NUM, EIP_PROPOSAL.PROJ_TITLE, TO_CHAR(EIP_PROPOSAL.DATE_INIT, 'DD-MON-YYYY') AS DATE_INIT, ";
        sql += "TO_CHAR(EIP_PROPOSAL.DATE_SUBMIT, 'DD-MON-YYYY') AS DATE_SUBMIT, EIP_PROPOSAL.DOC_STAND, EIP_USERMGT.FULLNAME AS PROJ_INIT ";
        sql += "FROM EIP_LINETEAMLEAD INNER JOIN ";
        sql += "EIP_PROPOSAL ON EIP_LINETEAMLEAD.IDPROPOSAL = EIP_PROPOSAL.IDPROPOSAL INNER JOIN ";
        sql += "EIP_USERMGT ON EIP_PROPOSAL.IDUSERMGT = EIP_USERMGT.IDUSERMGT ";
        sql += "WHERE (EIP_LINETEAMLEAD.IDUSERMGT = '" + UserID + "') AND (EIP_PROPOSAL.STATUS = '" + IPStatus.Activated + "') AND (EIP_PROPOSAL.DISCONTINUE <> '" + IPStatus.Discontinued + "') ";
        sql += "AND (EIP_LINETEAMLEAD.STAND = '" + SupportState.iNotSupported + "' OR EIP_LINETEAMLEAD.STAND = '" + SupportState.iStandDefault + "')";

        return DataAccess.ExecuteQueryCommand(sql);
    }

    public DataTable MyProposalHistory(string UserID)
    {
        string sql = "SELECT EIP_PROPOSAL.IDPROPOSAL, EIP_PROPOSAL.PROJ_NUM, EIP_PROPOSAL.PROJ_TITLE, TO_CHAR(EIP_PROPOSAL.DATE_INIT, 'DD-MON-YYYY')DATE_INIT, ";
        sql += "EIP_USERMGT.FULLNAME AS PROJ_INIT, TO_CHAR(EIP_PROPOSAL.DATE_SUBMIT, 'DD-MON-YYYY')DATE_SUBMIT, EIP_PROPOSAL.DOC_STAND, TO_CHAR(EIP_LINETEAMLEAD.DATE_COMMENT, 'DD-MON-YYYY')DATE_COMMENT ";
        sql += "FROM EIP_PROPOSAL, EIP_USERMGT, EIP_LINETEAMLEAD WHERE (EIP_USERMGT.IDUSERMGT = EIP_PROPOSAL.IDUSERMGT) ";
        sql += "AND (EIP_PROPOSAL.IDPROPOSAL = EIP_LINETEAMLEAD.IDPROPOSAL) AND (EIP_LINETEAMLEAD.IDUSERMGT = '" + UserID + "')";

        return DataAccess.ExecuteQueryCommand(sql);
    }

    public DataTable GetMyComment(string ProposalID, string UserID)
    {
        string sql = "SELECT EIP_PROPOSAL.PROJ_NUM, EIP_PROPOSAL.PROJ_TITLE, TO_CHAR(EIP_PROPOSAL.DATE_INIT, 'DD-MON-YYYY') AS DATE_INIT, ";
        sql += "TO_CHAR(EIP_PROPOSAL.DATE_SUBMIT, 'DD-MON-YYYY') AS DATE_SUBMIT, EIP_PROPOSAL.JV, EIP_PROPOSAL.SS, EIP_USERMGT.FULLNAME AS PROJ_INIT, ";
        sql += "EIP_AUDITTRAIL.STAND, EIP_AUDITTRAIL.CCOMMENT AS COMMENTS, TO_CHAR(EIP_AUDITTRAIL.DDATE, 'DD-MON-YYYY') AS DATE_COMMENT ";
        sql += "FROM EIP_PROPOSAL INNER JOIN ";
        sql += "EIP_USERMGT ON EIP_PROPOSAL.IDUSERMGT = EIP_USERMGT.IDUSERMGT INNER JOIN ";
        sql += "EIP_AUDITTRAIL ON EIP_PROPOSAL.IDPROPOSAL = EIP_AUDITTRAIL.IDPROPOSAL INNER JOIN ";
        sql += "EIP_USERMGT EIP_USERMGT_1 ON EIP_AUDITTRAIL.IDUSERMGT = EIP_USERMGT_1.IDUSERMGT INNER JOIN ";
        sql += "EIP_LINETEAMLEAD ON EIP_USERMGT_1.IDUSERMGT = EIP_LINETEAMLEAD.IDUSERMGT ";
        sql += "AND EIP_USERMGT_1.IDUSERMGT = '" + UserID + "' AND EIP_PROPOSAL.IDPROPOSAL = '" + ProposalID + "'";
        
        return DataAccess.ExecuteQueryCommand(sql);
    }

    public DataTable ServiceLevelAgreement()
    {
        string sql = "SELECT EIP_LINETEAMLEAD.IDPROPOSAL, EIP_LINETEAMLEAD.IDUSERMGT, EIP_LINETEAMLEAD.STAND, EIP_LINETEAMLEAD.DATE_RECEIVED ";
        sql += "FROM EIP_LINETEAMLEAD INNER JOIN EIP_PROPOSAL ON EIP_LINETEAMLEAD.IDPROPOSAL = EIP_PROPOSAL.IDPROPOSAL ";
        sql += "WHERE (EIP_LINETEAMLEAD.STAND = '" + SupportState.iSupportApproverStandDefault + "') AND (EIP_PROPOSAL.STATUS = '" + IPStatus.Activated + "')";
        
        return DataAccess.ExecuteQueryCommand(sql);
    }

    public static bool LineTeamLeadAddCommentProcedure(appUsers CurrentUser, Proposal proposal, string comment, int stand, string dateRev)
    {
        bool success = false;
        SendMail MyMail = new SendMail();
        string[] BPOEmail = { "" };
        string[] IPInitiatorMail = { "" };
        IPInitiator IPInit = new IPInitiator(proposal.IDUSERMGT);
        BusinessProcessOwner BPO = new BusinessProcessOwner(IPInit.iCompanyID);
        IPInitiatorMail[0] = IPInit.sUserMail;
        BPOEmail[0] = BPO.sUserMail;
        EPGIPTrackerComment IPTracker = new EPGIPTrackerComment();

        LineTeamLeadComments ltlComment = new LineTeamLeadComments(proposal.IDPROPOSAL);
        AddComment(CurrentUser, proposal, comment, stand, dateRev);
        if (stand == SupportState.iSupported)
        {
            //Line Team Lead assigns IP to BPO
            ltlComment.LineTeamLeadAssignsIPToBPO(BPO.sUserId, proposal.IDPROPOSAL, CurrentUser.iIDUSERMGT, dateRev);
            success = MyMail.LineTeamLeadSupportsIP(IPInitiatorMail, CurrentUser.sUSERMAIL, proposal.PROJ_TITLE, ApplicationURL.MyAppURL(), BPOEmail[0], proposal.PROJ_NUM);
        }
        else if (stand == SupportState.iNotSupported)
        {
            success = MyMail.IPNotSupportedByLineTeamLead(IPInitiatorMail, CurrentUser.sUSERMAIL, proposal.PROJ_TITLE, ApplicationURL.MyAppURL(), comment, CurrentUser.sFULLNAME, CurrentUser.iFUNCTION.ToString(), BPOEmail[0], proposal.PROJ_NUM); //there is a need to know what iFUNCTION represents
        }

        IPTracker.MailEPGIPTracker(proposal, CurrentUser.sUSERMAIL);
        return success;
    }
}