using System;
using System.Collections.Generic;
using System.Text;
using System.Data;

public class ManagingDirector
{
    private string m_sUserID;
    private string m_sUserMail;

    public ManagingDirector()
    {

    }

    public ManagingDirector(int CompanyID, int EPNIGERIALOGIC)
    {
        string sql = "SELECT IDUSERMGT, USERMAIL, FULLNAME FROM EIP_USERMGT WHERE EIP_USERMGT.USERROLESID = '" + eipUserRoles.iMD + "' ";
        sql += "AND EIP_USERMGT.COMPANYID = '" + CompanyID + "' AND EPNIGERIALOGIC = '" + EPNIGERIALOGIC + "' AND STATUS = '" + IPStatus.Activated + "'";

        DataTable dt = DataAccess.ExecuteQueryCommand(sql);
        if (dt.Rows.Count > 0)
        {
            m_sUserID = dt.Rows[0]["IDUSERMGT"].ToString();
            m_sUserMail = dt.Rows[0]["USERMAIL"].ToString();
        }
        else
        {
            MessageBox.Show("Sorry, this IP can not be forwarded for this reason:\n\n" +
                        "The Organisational Unit(OU) Managing Director for this \n" +
                        "Investment Proposal has not accepted his/her role or does not exist in eIP.\n" +
                        "Please, forward this message, with the IP Number, \n" +
                        "to the OU Business Process Owner for this IP or Central System Administrator. \n\n" +
                        "Thank you.");
        }
    }

    public string sUserID
    {
        get
        {
            return m_sUserID;
        }
    }

    public string sUserMail
    {
        get
        {
            return m_sUserMail;
        }
    }

    //public string OUMD(int CompanyID, int EPNIGERIALOGIC)
    //{
    //    string sql = "SELECT USERMAIL, IDUSERMGT, FULLNAME FROM EIP_USERMGT WHERE EIP_USERMGT.USERROLESID = '" + eipUserRoles.iMD + "' ";
    //    sql += "AND EIP_USERMGT.COMPANYID = '" + CompanyID + "' AND EPNIGERIALOGIC = '" + EPNIGERIALOGIC + "' AND STATUS = '" + IPStatus.Activated + "'";

    //    return sql;
    //}
}


public class MDComments
{
    private string m_sIDPROPOSAL;
    private string m_sCOMMENTS;
    private string m_sDATECOMMENT;
    private string m_sDATERECEIVED;
    private int m_iSTAND;
    private int m_iIDUSERMGT;

    public MDComments()
    {

    }

    public MDComments(int ProposalID)
    {
        string sql = "SELECT IDPROPOSAL, IDUSERMGT, COMMENTS, TO_CHAR(DATE_COMMENT, 'DD-MON-YYYY')DATE_COMMENT, STAND, TO_CHAR(DATE_RECEIVED, 'DD-MON-YYYY')DATE_RECEIVED FROM EIP_MD WHERE IDPROPOSAL = @IDPROPOSAL";
        sql = sql.Replace("@IDPROPOSAL", ProposalID.ToString());

        DataTable dt = DataAccess.ExecuteQueryCommand(sql);
        if (dt.Rows.Count > 0)
        {
            m_sIDPROPOSAL = dt.Rows[0]["IDPROPOSAL"].ToString();
            m_sCOMMENTS = dt.Rows[0]["COMMENTS"].ToString();
            m_sDATECOMMENT = dt.Rows[0]["DATE_COMMENT"].ToString();
            m_sDATERECEIVED = dt.Rows[0]["DATE_RECEIVED"].ToString();
            m_iSTAND = Convert.ToInt32(dt.Rows[0]["STAND"]);
            m_iIDUSERMGT = Convert.ToInt32(dt.Rows[0]["IDUSERMGT"]);
        }
    }

    public string sIDPROPOSAL
    {
        get
        {
            return m_sIDPROPOSAL;
        }
    }

    public string sCOMMENTS
    {
        get
        {
            return m_sCOMMENTS;
        }
    }

    public string sDATECOMMENT
    {
        get
        {
            return m_sDATECOMMENT;
        }
    }

    public string sDATERECEIVED
    {
        get
        {
            return m_sDATERECEIVED;
        }
    }

    public int iSTAND
    {
        get
        {
            return m_iSTAND;
        }
    }

    public int iIDUSERMGT
    {
        get
        {
            return m_iIDUSERMGT;
        }
    }

    public bool MDApprovalStand()
    {
        bool Approved = false;
        if (iSTAND == SupportState.iApproved)
        {
            Approved = true;
        }
        return Approved;
    }

    public bool MDStand()
    {
        bool Supported = false;
        if (iSTAND == SupportState.iSupported)
        {
            Supported = true;
        }
        return Supported;
    }

    private static bool AddComment(appUsers CurrentUser, Proposal proposal, string comment, int stand, string dateRev)
    {
        bool success = false;
        string sql = "UPDATE EIP_MD SET STAND = @STAND, COMMENTS = @COMMENTS, DATE_COMMENT = TO_DATE('" + dateRev + "', 'mm/dd/yyyy') ";
        sql += "WHERE (IDPROPOSAL = @IDPROPOSAL) AND (IDUSERMGT = @IDUSERMGT)";
        sql = sql.Replace("@STAND", "'" + stand.ToString() + "'");
        sql = sql.Replace("@COMMENTS", "'" + comment.Replace("'", "''") + "'");
        sql = sql.Replace("@IDPROPOSAL", "'" + proposal.IDPROPOSAL + "'");
        sql = sql.Replace("@IDUSERMGT", "'" + CurrentUser.iIDUSERMGT + "'");

        success = DataAccess.ExecuteNonQueryCommand(sql);
        db.AuditTrail(CurrentUser, stand, comment, dateRev, proposal.IDPROPOSAL);
        proposal.ProposalActionTrail(proposal.IDPROPOSAL, CurrentUser);

        return success;
    }

    public void AssignIPtoGMREPlanning(string UserID, string ProposalID)
    {
        string sql = "INSERT INTO EIP_GMREPLAN (IDUSERMGT, IDPROPOSAL, DATE_RECEIVED) VALUES ";
        sql += "('" + UserID + "', '" + ProposalID + "', TO_DATE('" + DateTime.Today.Date.ToShortDateString() + "', 'MM/DD/YYYY'))";
        DataAccess.ExecuteNonQueryCommand(sql);
    }

    public bool MDReceivedIP()
    {
        bool IPFound = false;
        if (sIDPROPOSAL != null)
        {
            IPFound = true;
        }
        return IPFound;
    }

    public DataTable MyPendingProposal(string UserID)
    {
        //string sql = "SELECT EIP_PROPOSAL.IDPROPOSAL, EIP_PROPOSAL.PROJ_NUM, EIP_PROPOSAL.PROJ_TITLE, EIP_USERMGT.FULLNAME AS PROJ_INIT, "; 
        //sql += "TO_CHAR(EIP_PROPOSAL.DATE_INIT, 'DD-MON-YYYY') AS DATE_INIT, TO_CHAR(EIP_PROPOSAL.DATE_SUBMIT, 'DD-MON-YYYY') AS DATE_SUBMIT ";
        //sql += "FROM EIP_PROPOSAL INNER JOIN ";
        //sql += "EIP_IPINITIATOR ON EIP_PROPOSAL.IDPROPOSAL = EIP_IPINITIATOR.IDPROPOSAL INNER JOIN ";
        //sql += "EIP_USERMGT ON EIP_IPINITIATOR.IDUSERMGT = EIP_USERMGT.IDUSERMGT INNER JOIN ";
        //sql += "EIP_MD ON EIP_PROPOSAL.IDPROPOSAL = EIP_MD.IDPROPOSAL ";

        string sql = "SELECT EIP_PROPOSAL.IDPROPOSAL, EIP_PROPOSAL.PROJ_NUM, EIP_PROPOSAL.PROJ_TITLE, EIP_USERMGT.FULLNAME AS PROJ_INIT, ";
        sql += "TO_CHAR(EIP_PROPOSAL.DATE_INIT, 'DD-MON-YYYY') AS DATE_INIT, TO_CHAR(EIP_PROPOSAL.DATE_SUBMIT, 'DD-MON-YYYY') AS DATE_SUBMIT ";
        sql += "FROM EIP_PROPOSAL INNER JOIN ";
        sql += "EIP_MD ON EIP_PROPOSAL.IDPROPOSAL = EIP_MD.IDPROPOSAL INNER JOIN ";
        sql += "EIP_USERMGT ON EIP_PROPOSAL.IDUSERMGT = EIP_USERMGT.IDUSERMGT ";
        sql += "WHERE (EIP_MD.IDUSERMGT = '" + UserID + "') AND (EIP_PROPOSAL.STATUS = '" + IPStatus.Activated + "') ";
        sql += "AND (EIP_PROPOSAL.DISCONTINUE <> '" + IPStatus.Discontinued + "') ";
        sql += "AND ((EIP_MD.STAND = '" + SupportState.iNotSupported + "') OR (EIP_MD.STAND = '" + SupportState.iStandDefault + "'))";

        DataTable dt = DataAccess.ExecuteQueryCommand(sql);

        //Seek pending proposals when acting as a Vice president.
        VPComments VP = new VPComments();
        dt.Merge(VP.MyPendingProposal(UserID));

        return dt;
    }

    public DataTable MyProposalHistory(string UserID)
    {
        string sql = "SELECT EIP_PROPOSAL.IDPROPOSAL, EIP_PROPOSAL.PROJ_NUM, EIP_PROPOSAL.PROJ_TITLE, TO_CHAR(EIP_PROPOSAL.DATE_INIT, 'DD-MON-YYYY')DATE_INIT, ";
        sql += "EIP_USERMGT.FULLNAME AS PROJ_INIT, TO_CHAR(EIP_PROPOSAL.DATE_SUBMIT, 'DD-MON-YYYY')DATE_SUBMIT, EIP_PROPOSAL.DOC_STAND, TO_CHAR(EIP_MD.DATE_COMMENT, 'DD-MON-YYYY')DATE_COMMENT ";
        sql += "FROM EIP_PROPOSAL, EIP_USERMGT, EIP_MD WHERE (EIP_USERMGT.IDUSERMGT = EIP_PROPOSAL.IDUSERMGT) ";
        sql += "AND (EIP_PROPOSAL.IDPROPOSAL = EIP_MD.IDPROPOSAL) AND (EIP_MD.IDUSERMGT = '" + UserID + "') ";

        return DataAccess.ExecuteQueryCommand(sql);
    }

    public DataTable GetMyComment(string ProposalID, string UserID)
    {
        string sql = "SELECT EIP_PROPOSAL.PROJ_NUM, EIP_PROPOSAL.PROJ_TITLE, TO_CHAR(EIP_PROPOSAL.DATE_INIT, 'DD-MON-YYYY') AS DATE_INIT, ";
        sql += "TO_CHAR(EIP_PROPOSAL.DATE_SUBMIT, 'DD-MON-YYYY') AS DATE_SUBMIT, EIP_PROPOSAL.JV, EIP_PROPOSAL.SS, EIP_USERMGT.FULLNAME AS PROJ_INIT, ";
        sql += "EIP_AUDITTRAIL.STAND, EIP_AUDITTRAIL.CCOMMENT AS COMMENTS, TO_CHAR(EIP_AUDITTRAIL.DDATE, 'DD-MON-YYYY') AS DATE_COMMENT ";
        sql += "FROM EIP_PROPOSAL INNER JOIN ";
        sql += "EIP_USERMGT ON EIP_PROPOSAL.IDUSERMGT = EIP_USERMGT.IDUSERMGT INNER JOIN ";
        sql += "EIP_AUDITTRAIL ON EIP_PROPOSAL.IDPROPOSAL = EIP_AUDITTRAIL.IDPROPOSAL INNER JOIN ";
        sql += "EIP_USERMGT EIP_USERMGT_1 ON EIP_AUDITTRAIL.IDUSERMGT = EIP_USERMGT_1.IDUSERMGT INNER JOIN ";
        sql += "EIP_MD ON EIP_USERMGT_1.IDUSERMGT = EIP_MD.IDUSERMGT ";
        sql += "AND EIP_USERMGT_1.IDUSERMGT = '" + UserID + "' AND EIP_PROPOSAL.IDPROPOSAL = '" + ProposalID + "'";

        return DataAccess.ExecuteQueryCommand(sql);
    }

    public DataTable ServiceLevelAgreement()
    {
        string sql = "SELECT EIP_MD.IDPROPOSAL, EIP_MD.IDUSERMGT, EIP_MD.STAND, EIP_MD.DATE_RECEIVED ";
        sql += "FROM EIP_MD INNER JOIN EIP_PROPOSAL ON EIP_MD.IDPROPOSAL = EIP_PROPOSAL.IDPROPOSAL ";
        sql += "WHERE (EIP_MD.STAND = '" + SupportState.iSupportApproverStandDefault + "') AND (EIP_PROPOSAL.STATUS = '" + IPStatus.Activated + "')";

        return DataAccess.ExecuteQueryCommand(sql);
    }

    public static bool MDAddCommentProcedure(appUsers CurrentUser, Proposal proposal, string comment, int stand, string dateRev)
    {
        bool success = false;
        SendMail MyMail = new SendMail();
        string[] BPOEmail = { "" };
        string[] IPInitiatorMail = { "" };
        IPInitiator IPInit = new IPInitiator(proposal.IDUSERMGT);
        BusinessProcessOwner BPO = new BusinessProcessOwner(IPInit.iCompanyID);
        IPInitiatorMail[0] = IPInit.sUserMail;
        EPGIPTrackerComment IPTracker = new EPGIPTrackerComment();

        if (CurrentUser.iUSERROLESID == eipUserRoles.iMD)
        {
            //
            //Note: here, if IP is found for MD, it is either in EIP_MD or EIP_VPS table. 
            //So if MD.AddComment returns false, then check out VP.AddComment
            //
            VPComments VP = new VPComments(proposal.IDPROPOSAL, CurrentUser.iIDUSERMGT);
            MDComments MD = new MDComments(proposal.IDPROPOSAL);
            if (MD.MDReceivedIP() == true)
            {
                success = AddComment(CurrentUser, proposal, comment, stand, dateRev);
                if (success == true)
                {
                    if (stand == SupportState.iSupported)
                    {
                        proposal.ProposalSupportedApproved(proposal, CurrentUser, BPO.sUserMail, IPInitiatorMail[0]);
                        success = true;
                    }
                    else if (stand == SupportState.iNotSupported)
                    {
                        proposal.ProposalNotSupported(proposal, CurrentUser, proposal.PROJ_TITLE, comment);
                        success = true;
                    }
                }
            }
            else if (VP.VPReceivedIP() == true)
            {
                success = VPComments.VPAddCommentProcedure(CurrentUser, proposal, comment, stand, dateRev);
                if (success == true)
                {
                    if (stand == SupportState.iApproved)
                    {
                        proposal.ProposalSupportedApproved(proposal, CurrentUser, BPO.sUserMail, IPInitiatorMail[0]);
                        success = true;
                    }
                    else if (stand == SupportState.iNotApproved)
                    {
                        proposal.ProposalNotSupported(proposal, CurrentUser, proposal.PROJ_TITLE, comment);
                        success = true;
                    }
                }
            }
        }
        IPTracker.MailEPGIPTracker(proposal, CurrentUser.sUSERMAIL);
        return success;
    }
}