using System;
using System.Collections.Generic;
using System.Web;
using System.Data;
using System.Web.UI.WebControls;


/// <summary>
/// Summary description for VicePresidents
/// </summary>
public class VicePresidents
{
	public VicePresidents()
	{
		
	}
}


public class VPComments
{
    private string m_sIDPROPOSAL;
    private string m_sCOMMENTS;
    private string m_sDATECOMMENT;
    private string m_sDATERECEIVED;
    private int m_iSTAND;
    private int m_iIDUSERMGT;

    public VPComments()
    {

    }

    //This is used when the IP values is greater or equal to Third Quartile, many VPS may receive the IP for support
    public VPComments(int ProposalID, int UserID)
    {
        string sql = "SELECT IDPROPOSAL, IDUSERMGT, COMMENTS, TO_CHAR(DATE_COMMENT, 'DD-MON-YYYY')DATE_COMMENT, STAND, TO_CHAR(DATE_RECEIVED, 'DD-MON-YYYY')DATE_RECEIVED FROM EIP_VPS WHERE (IDPROPOSAL = :IDPROPOSAL) AND (IDUSERMGT = :IDUSERMGT)";
        sql = sql.Replace(":IDPROPOSAL", ProposalID.ToString());
        sql = sql.Replace(":IDUSERMGT", UserID.ToString());

        DataTable dt = DataAccess.ExecuteQueryCommand(sql);
        if (dt.Rows.Count > 0)
        {
            m_sIDPROPOSAL = dt.Rows[0]["IDPROPOSAL"].ToString();
            m_sCOMMENTS = dt.Rows[0]["COMMENTS"].ToString();
            m_sDATECOMMENT = dt.Rows[0]["DATE_COMMENT"].ToString();
            m_sDATERECEIVED = dt.Rows[0]["DATE_RECEIVED"].ToString();
            m_iSTAND = Convert.ToInt32(dt.Rows[0]["STAND"]);
            m_iIDUSERMGT = Convert.ToInt32(dt.Rows[0]["IDUSERMGT"]);
        }
    }

    //This is used when IP value is less than ThirdQuartile, a VP exists for the IP
    public VPComments(string ProposalID)
    {
        string sql = "SELECT IDPROPOSAL, IDUSERMGT, COMMENTS, TO_CHAR(DATE_COMMENT, 'DD-MON-YYYY')DATE_COMMENT, STAND, TO_CHAR(DATE_RECEIVED, 'DD-MON-YYYY')DATE_RECEIVED FROM EIP_VPS WHERE (IDPROPOSAL = :IDPROPOSAL)";
        sql = sql.Replace(":IDPROPOSAL", ProposalID);

        DataTable dt = DataAccess.ExecuteQueryCommand(sql);
        if (dt.Rows.Count > 0)
        {
            m_sIDPROPOSAL = dt.Rows[0]["IDPROPOSAL"].ToString();
            m_sCOMMENTS = dt.Rows[0]["COMMENTS"].ToString();
            m_sDATECOMMENT = dt.Rows[0]["DATE_COMMENT"].ToString();
            m_sDATERECEIVED = dt.Rows[0]["DATE_RECEIVED"].ToString();
            m_iSTAND = Convert.ToInt32(dt.Rows[0]["STAND"]);
            m_iIDUSERMGT = Convert.ToInt32(dt.Rows[0]["IDUSERMGT"]);
        }
    }

    public string sIDPROPOSAL
    {
        get
        {
            return m_sIDPROPOSAL;
        }
    }

    public string sCOMMENTS
    {
        get
        {
            return m_sCOMMENTS;
        }
    }

    public string sDATECOMMENT
    {
        get
        {
            return m_sDATECOMMENT;
        }
    }

    public string sDATERECEIVED
    {
        get
        {
            return m_sDATERECEIVED;
        }
    }

    public int iSTAND
    {
        get
        {
            return m_iSTAND;
        }
    }

    public int iIDUSERMGT
    {
        get
        {
            return m_iIDUSERMGT;
        }
    }

    public bool VPStand()
    {
        bool Supported = false;
        if ((iSTAND == SupportState.iSupported) || (iSTAND == SupportState.iFinanceApproval))
        {
            Supported = true;
        }
        return Supported;
    }

    public bool VPApprovalStand()
    {
        bool Approved = false;
        if (iSTAND == SupportState.iApproved)
        {
            Approved = true;
        }
        return Approved;
    }

    //Check if IP has been forwarded to VicePresident
    public bool VPReceivedIP()
    {
        bool IPFound = false;
        if (sIDPROPOSAL != null)
        {
            IPFound = true;
        }
        return IPFound;
    }

    private static bool AddComment(appUsers CurrentUser, Proposal proposal, string comment, int stand, string dateRev)
    {
        bool success = false;
        string sql = "UPDATE EIP_VPS SET STAND = :STAND, COMMENTS = :COMMENTS, DATE_COMMENT = TO_DATE('" + dateRev + "', 'mm/dd/yyyy') ";
        sql += "WHERE (IDPROPOSAL = :IDPROPOSAL) AND (IDUSERMGT = :IDUSERMGT)";
        sql = sql.Replace(":STAND", "'" + stand.ToString() + "'");
        sql = sql.Replace(":COMMENTS", "'" + comment.Replace("'", "''") + "'");
        sql = sql.Replace(":IDPROPOSAL", "'" + proposal.IDPROPOSAL + "'");
        sql = sql.Replace(":IDUSERMGT", "'" + CurrentUser.iIDUSERMGT + "'");

        success = DataAccess.ExecuteNonQueryCommand(sql);

        db.AuditTrail(CurrentUser, stand, comment, dateRev, proposal.IDPROPOSAL);
        proposal.ProposalActionTrail(proposal.IDPROPOSAL, CurrentUser);

        return success;
    }


    public void AssignProposalToREVP(string UserID, string ProposalID)
    {
       
        string sql = "INSERT INTO EIP_REVP (IDUSERMGT, IDPROPOSAL, DATE_RECEIVED) VALUES ";
        sql += "(@IDUSERMGT, @IDPROPOSAL, TO_DATE('" + DateTime.Today.Date.ToShortDateString() + "', 'MM/DD/YYYY'))";
        sql = sql.Replace("@IDUSERMGT", "'" + UserID + "'");
        sql = sql.Replace("@IDPROPOSAL", "'" + ProposalID + "'");
        
        DataAccess.ExecuteNonQueryCommand(sql);
    }

    public DataTable MyPendingProposal(string UserID)
    {
        string sql = "SELECT EIP_PROPOSAL.IDPROPOSAL, EIP_PROPOSAL.PROJ_NUM, EIP_PROPOSAL.PROJ_TITLE, EIP_USERMGT.FULLNAME AS PROJ_INIT, ";
        sql += "TO_CHAR(EIP_PROPOSAL.DATE_INIT, 'DD-MON-YYYY') AS DATE_INIT, TO_CHAR(EIP_PROPOSAL.DATE_SUBMIT, 'DD-MON-YYYY') AS DATE_SUBMIT ";
        sql += "FROM EIP_PROPOSAL INNER JOIN ";
        sql += "EIP_VPS ON EIP_PROPOSAL.IDPROPOSAL = EIP_VPS.IDPROPOSAL INNER JOIN ";
        sql += "EIP_USERMGT ON EIP_PROPOSAL.IDUSERMGT = EIP_USERMGT.IDUSERMGT ";
        sql += "WHERE (EIP_VPS.IDUSERMGT = '" + UserID + "') AND (EIP_PROPOSAL.STATUS = '" + IPStatus.Activated + "') ";
        sql += "AND (EIP_PROPOSAL.DISCONTINUE <> '" + IPStatus.Discontinued + "') ";
        sql += "AND ((EIP_VPS.STAND = '" + SupportState.iNotSupported + "') OR (EIP_VPS.STAND = '" + SupportState.iNotApproved + "') OR (EIP_VPS.STAND = '" + SupportState.iStandDefault + "'))";

        return DataAccess.ExecuteQueryCommand(sql);
    }

    public DataTable MyProposalHistory(string UserID)
    {
        string sql = "SELECT EIP_PROPOSAL.IDPROPOSAL, EIP_PROPOSAL.PROJ_NUM, EIP_PROPOSAL.PROJ_TITLE, TO_CHAR(EIP_PROPOSAL.DATE_INIT, 'DD-MON-YYYY')DATE_INIT, ";
        sql += "EIP_USERMGT.FULLNAME AS PROJ_INIT, TO_CHAR(EIP_PROPOSAL.DATE_SUBMIT, 'DD-MON-YYYY')DATE_SUBMIT, EIP_PROPOSAL.DOC_STAND, TO_CHAR(EIP_VPS.DATE_COMMENT, 'DD-MON-YYYY')DATE_COMMENT ";
        sql += "FROM EIP_PROPOSAL, EIP_USERMGT, EIP_VPS WHERE  (EIP_USERMGT.IDUSERMGT = EIP_PROPOSAL.IDUSERMGT) ";
        sql += "AND (EIP_PROPOSAL.IDPROPOSAL = EIP_VPS.IDPROPOSAL) AND (EIP_VPS.IDUSERMGT = '" + UserID + "')";

        return DataAccess.ExecuteQueryCommand(sql);
    }

    public DataTable GetMyComment(string ProposalID, string UserID)
    {
        string sql = "SELECT EIP_PROPOSAL.PROJ_NUM, EIP_PROPOSAL.PROJ_TITLE, TO_CHAR(EIP_PROPOSAL.DATE_INIT, 'DD-MON-YYYY') AS DATE_INIT, ";
        sql += "TO_CHAR(EIP_PROPOSAL.DATE_SUBMIT, 'DD-MON-YYYY') AS DATE_SUBMIT, EIP_PROPOSAL.JV, EIP_PROPOSAL.SS, EIP_USERMGT.FULLNAME AS PROJ_INIT, ";
        sql += "EIP_AUDITTRAIL.STAND, EIP_AUDITTRAIL.CCOMMENT AS COMMENTS, TO_CHAR(EIP_AUDITTRAIL.DDATE, 'DD-MON-YYYY') AS DATE_COMMENT ";
        sql += "FROM EIP_PROPOSAL INNER JOIN ";
        sql += "EIP_USERMGT ON EIP_PROPOSAL.IDUSERMGT = EIP_USERMGT.IDUSERMGT INNER JOIN ";
        sql += "EIP_AUDITTRAIL ON EIP_PROPOSAL.IDPROPOSAL = EIP_AUDITTRAIL.IDPROPOSAL INNER JOIN ";
        sql += "EIP_USERMGT EIP_USERMGT_1 ON EIP_AUDITTRAIL.IDUSERMGT = EIP_USERMGT_1.IDUSERMGT INNER JOIN ";
        sql += "EIP_VPS ON EIP_USERMGT_1.IDUSERMGT = EIP_VPS.IDUSERMGT ";
        sql += "AND EIP_USERMGT_1.IDUSERMGT = '" + UserID + "' AND EIP_PROPOSAL.IDPROPOSAL = '" + ProposalID + "'";

        return DataAccess.ExecuteQueryCommand(sql);
    }



    public DataTable ServiceLevelAgreement()
    {
        string sql = "SELECT EIP_VPS.IDPROPOSAL, EIP_VPS.IDUSERMGT, EIP_VPS.STAND, EIP_VPS.DATE_RECEIVED ";
        sql += "FROM EIP_VPS INNER JOIN EIP_PROPOSAL ON EIP_VPS.IDPROPOSAL = EIP_PROPOSAL.IDPROPOSAL ";
        sql += "WHERE (EIP_VPS.STAND = '" + SupportState.iSupportApproverStandDefault + "') AND (EIP_PROPOSAL.STATUS = '" + IPStatus.Activated + "')";

        return DataAccess.ExecuteQueryCommand(sql);
    }

    public static bool VPAddCommentProcedure(appUsers CurrentUser, Proposal proposal, string comment, int stand, string dateRev)
    {
        bool success = false;
        string[] BPOEmail = { "" };
        string[] IPInitiatorMail = { "" };
        IPInitiator IPInit = new IPInitiator(proposal.IDUSERMGT);
        BusinessProcessOwner BPO = new BusinessProcessOwner(IPInit.iCompanyID);
        IPInitiatorMail[0] = IPInit.sUserMail;
        EPGIPTrackerComment IPTracker = new EPGIPTrackerComment();

        VPComments VP = new VPComments(proposal.IDPROPOSAL);
        AddComment(CurrentUser, proposal, comment, stand, dateRev);
        if (stand == SupportState.iApproved)
        {
            proposal.ProposalSupportedApproved(proposal, CurrentUser, BPO.sUserMail, IPInitiatorMail[0]);
            success = true;
        }
        else if (stand == SupportState.iSupported)
        {
            proposal.ProposalSupportedApproved(proposal, CurrentUser, BPO.sUserMail, IPInitiatorMail[0]);
            success = true;
        }
        else if (stand == SupportState.iNotSupported)
        {
            proposal.ProposalNotSupported(proposal, CurrentUser, proposal.PROJ_TITLE, comment);
            success = true;
        }
        IPTracker.MailEPGIPTracker(proposal, CurrentUser.sUSERMAIL);
        return success;
    }
}