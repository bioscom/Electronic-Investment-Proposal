using System;
using System.Collections.Generic;
using System.Web;
using System.Data;


/// <summary>
/// Summary description for GM
/// </summary>
public class GM
{
    public GM()
    {
        
    }
}


public class GMComments
{
    private string m_sIDPROPOSAL;
    private string m_sCOMMENTS;
    private string m_sDATECOMMENT;
    private string m_sDATERECEIVED;
    private int m_iSTAND;
    private int m_iIDUSERMGT;

    public GMComments()
    {

    }

    public GMComments(string ProposalID, string UserID)
    {

        string sql = "SELECT IDPROPOSAL, IDUSERMGT, COMMENTS, TO_CHAR(DATE_COMMENT, 'DD-MON-YYYY')DATE_COMMENT, STAND, TO_CHAR(DATE_RECEIVED, 'DD-MON-YYYY')DATE_RECEIVED FROM EIP_GM WHERE IDPROPOSAL = @IDPROPOSAL AND IDUSERMGT = @IDUSERMGT";
        sql = sql.Replace("@IDPROPOSAL", ProposalID);
        sql = sql.Replace("@IDUSERMGT", UserID);

        DataTable dt = DataAccess.ExecuteQueryCommand(sql);
        if (dt.Rows.Count > 0)
        {
            m_sIDPROPOSAL = dt.Rows[0]["IDPROPOSAL"].ToString();
            m_iIDUSERMGT = Convert.ToInt32(dt.Rows[0]["IDUSERMGT"]);
            m_sCOMMENTS = dt.Rows[0]["COMMENTS"].ToString();
            m_sDATECOMMENT = dt.Rows[0]["DATE_COMMENT"].ToString();
            m_sDATERECEIVED = dt.Rows[0]["DATE_RECEIVED"].ToString();
            m_iSTAND = Convert.ToInt32(dt.Rows[0]["STAND"]);
        }
    }

    public GMComments(string ProposalID)
    {
        string sql = "SELECT IDPROPOSAL, COMMENTS, TO_CHAR(DATE_COMMENT, 'DD-MON-YYYY')DATE_COMMENT, STAND, TO_CHAR(DATE_RECEIVED, 'DD-MON-YYYY')DATE_RECEIVED FROM EIP_GM WHERE IDPROPOSAL = @IDPROPOSAL";
        sql = sql.Replace("@IDPROPOSAL", ProposalID);

        DataTable dt = DataAccess.ExecuteQueryCommand(sql);
        if (dt.Rows.Count > 0)
        {
            m_sIDPROPOSAL = dt.Rows[0]["IDPROPOSAL"].ToString();
            m_iIDUSERMGT = Convert.ToInt32(dt.Rows[0]["IDUSERMGT"]);
            m_sCOMMENTS = dt.Rows[0]["COMMENTS"].ToString();
            m_sDATECOMMENT = dt.Rows[0]["DATE_COMMENT"].ToString();
            m_sDATERECEIVED = dt.Rows[0]["DATE_RECEIVED"].ToString();
            m_iSTAND = Convert.ToInt32(dt.Rows[0]["STAND"]);
        }
    }

    public string sIDPROPOSAL
    {
        get
        {
            return m_sIDPROPOSAL;
        }
    }

    public string sCOMMENTS
    {
        get
        {
            return m_sCOMMENTS;
        }
    }

    public string sDATECOMMENT
    {
        get
        {
            return m_sDATECOMMENT;
        }
    }

    public string sDATERECEIVED
    {
        get
        {
            return m_sDATERECEIVED;
        }
    }

    public int iSTAND
    {
        get
        {
            return m_iSTAND;
        }
    }

    public int iIDUSERMGT
    {
        get
        {
            return m_iIDUSERMGT;
        }
    }

    public bool GMStand()
    {
        bool Supported = false;
        if (iSTAND == SupportState.iSupported)
        {
            Supported = true;
        }
        return Supported;
    }

    private static void AddComment(appUsers CurrentUser, Proposal proposal, string comment, int stand, string dateRev)
    {
        string sql = "UPDATE EIP_GM SET STAND = @STAND, COMMENTS = @COMMENTS, DATE_COMMENT = TO_DATE('" + dateRev + "', 'mm/dd/yyyy') ";
        sql += "WHERE (IDPROPOSAL = @IDPROPOSAL) AND (IDUSERMGT = @IDUSERMGT)";
        sql = sql.Replace("@STAND", "'" + stand.ToString() + "'");
        sql = sql.Replace("@COMMENTS", "'" + comment.Replace("'", "''") + "'");
        sql = sql.Replace("@IDPROPOSAL", "'" + proposal.IDPROPOSAL + "'");
        sql = sql.Replace("@IDUSERMGT", "'" + CurrentUser.iIDUSERMGT + "'");

        DataAccess.ExecuteNonQueryCommand(sql);

        db.AuditTrail(CurrentUser, stand, comment, dateRev, proposal.IDPROPOSAL);

        proposal.ProposalActionTrail(proposal.IDPROPOSAL, CurrentUser);
    }

    public bool GMReceivedIP()
    {
        bool IPFound = false;
        if (sIDPROPOSAL != null)
        {
            IPFound = true;
        }
        return IPFound;
    }

    public DataTable MyPendingProposal(string UserID)
    {
        string sql = "SELECT EIP_PROPOSAL.IDPROPOSAL, EIP_PROPOSAL.PROJ_NUM, EIP_PROPOSAL.PROJ_TITLE, EIP_USERMGT.FULLNAME AS PROJ_INIT, "; 
        sql += "TO_CHAR(EIP_PROPOSAL.DATE_INIT, 'DD-MON-YYYY') AS DATE_INIT, TO_CHAR(EIP_PROPOSAL.DATE_SUBMIT, 'DD-MON-YYYY') AS DATE_SUBMIT ";
        sql += "FROM EIP_PROPOSAL INNER JOIN ";
        sql += "EIP_USERMGT ON EIP_PROPOSAL.IDUSERMGT = EIP_USERMGT.IDUSERMGT INNER JOIN ";
        sql += "EIP_GM ON EIP_PROPOSAL.IDPROPOSAL = EIP_GM.IDPROPOSAL ";
        sql += "WHERE (EIP_GM.IDUSERMGT = '" + UserID + "') AND (EIP_PROPOSAL.STATUS = '" + IPStatus.Activated + "') ";
        sql += "AND (EIP_PROPOSAL.DISCONTINUE <> '" + IPStatus.Discontinued + "') ";
        sql += "AND ((EIP_GM.STAND = '" + SupportState.iNotSupported + "') OR (EIP_GM.STAND = '" + SupportState.iStandDefault + "'))";

        return DataAccess.ExecuteQueryCommand(sql);
    }

    public DataTable MyProposalHistory(string UserID)
    {
        string sql = "SELECT EIP_PROPOSAL.IDPROPOSAL, EIP_PROPOSAL.PROJ_NUM, EIP_PROPOSAL.PROJ_TITLE, TO_CHAR(EIP_PROPOSAL.DATE_INIT, 'DD-MON-YYYY')DATE_INIT, ";
        sql += "EIP_USERMGT.FULLNAME AS PROJ_INIT, TO_CHAR(EIP_PROPOSAL.DATE_SUBMIT, 'DD-MON-YYYY')DATE_SUBMIT, EIP_PROPOSAL.DOC_STAND, TO_CHAR(EIP_GM.DATE_COMMENT, 'DD-MON-YYYY')DATE_COMMENT ";
        sql += "FROM EIP_PROPOSAL, EIP_USERMGT, EIP_GM WHERE (EIP_USERMGT.IDUSERMGT = EIP_PROPOSAL.IDUSERMGT) ";
        sql += "AND (EIP_PROPOSAL.IDPROPOSAL = EIP_GM.IDPROPOSAL) AND (EIP_GM.IDUSERMGT = '" + UserID + "') ";

        return DataAccess.ExecuteQueryCommand(sql);
    }

    public DataTable GetMyComment(string ProposalID, string UserID)
    {
        string sql = "SELECT EIP_PROPOSAL.PROJ_NUM, EIP_PROPOSAL.PROJ_TITLE, TO_CHAR(EIP_PROPOSAL.DATE_INIT, 'DD-MON-YYYY') AS DATE_INIT, ";
        sql += "TO_CHAR(EIP_PROPOSAL.DATE_SUBMIT, 'DD-MON-YYYY') AS DATE_SUBMIT, EIP_PROPOSAL.JV, EIP_PROPOSAL.SS, EIP_USERMGT.FULLNAME AS PROJ_INIT, ";
        sql += "EIP_AUDITTRAIL.STAND, EIP_AUDITTRAIL.CCOMMENT AS COMMENTS, TO_CHAR(EIP_AUDITTRAIL.DDATE, 'DD-MON-YYYY') AS DATE_COMMENT ";
        sql += "FROM EIP_PROPOSAL INNER JOIN ";
        sql += "EIP_USERMGT ON EIP_PROPOSAL.IDUSERMGT = EIP_USERMGT.IDUSERMGT INNER JOIN ";
        sql += "EIP_AUDITTRAIL ON EIP_PROPOSAL.IDPROPOSAL = EIP_AUDITTRAIL.IDPROPOSAL INNER JOIN ";
        sql += "EIP_USERMGT EIP_USERMGT_1 ON EIP_AUDITTRAIL.IDUSERMGT = EIP_USERMGT_1.IDUSERMGT INNER JOIN ";
        sql += "EIP_GM ON EIP_USERMGT_1.IDUSERMGT = EIP_GM.IDUSERMGT ";
        sql += "AND EIP_USERMGT_1.IDUSERMGT = '" + UserID + "' AND EIP_PROPOSAL.IDPROPOSAL = '" + ProposalID + "'";

        return DataAccess.ExecuteQueryCommand(sql);
    }

    public DataTable GMComment(string ProposalID)
    {
        string sql = "SELECT IDPROPOSAL, COMMENTS, DATE_COMMENT, STAND, DATE_RECEIVED FROM EIP_GM WHERE IDPROPOSAL = @IDPROPOSAL";
        sql = sql.Replace("@IDPROPOSAL", ProposalID);

        return DataAccess.ExecuteQueryCommand(sql);
    }

    public DataTable GMSupportDetails(string ProposalID)
    {
        string sql = "SELECT EIP_USERROLES.USERROLESID, EIP_USERROLES.ROLES, CPDMS_FUNCTIONS.FUNCTION, EIP_USERMGT.FULLNAME, EIP_PROPOSAL.PROJ_NUM, ";
        sql += "EIP_PROPOSAL.PROJ_TITLE, EIP_USERMGT.FULLNAME AS PROJ_INIT, TO_CHAR(EIP_PROPOSAL.DATE_INIT, 'DD-MON-YYYY') AS DATE_INIT, EIP_PROPOSAL.JV, ";
        sql += "EIP_PROPOSAL.SS, TO_CHAR(EIP_PROPOSAL.DATE_SUBMIT, 'DD-MON-YYYY') AS DATE_SUBMIT, EIP_USERMGT.USERMAIL, EIP_GM.STAND,  ";
        sql += "EIP_GM.COMMENTS, TO_CHAR(EIP_GM.DATE_COMMENT, 'DD-MON-YYYY')DATE_COMMENT FROM EIP_USERMGT INNER JOIN ";
        sql += "CPDMS_FUNCTIONS ON EIP_USERMGT.FUNCTIONID = CPDMS_FUNCTIONS.FUNCTIONID INNER JOIN ";
        sql += "EIP_GM ON EIP_USERMGT.IDUSERMGT = EIP_GM.IDUSERMGT INNER JOIN ";
        sql += "EIP_PROPOSAL ON EIP_GM.IDPROPOSAL = EIP_PROPOSAL.IDPROPOSAL INNER JOIN ";
        sql += "EIP_USERROLES ON EIP_USERMGT.USERROLESID = EIP_USERROLES.USERROLESID ";
        sql += "WHERE EIP_GM.IDPROPOSAL = '" + ProposalID + "'";

        return DataAccess.ExecuteQueryCommand(sql);
    }

    public DataTable GetAllGMs()
    {
        string sql = "SELECT EIP_USERMGT.USERMAIL, EIP_USERMGT.IDUSERMGT, EIP_USERROLES.ROLES ||' '|| CPDMS_FUNCTIONS.FUNCTION AS GMGR, EIP_USERMGT.FULLNAME ";
        sql += "FROM EIP_USERMGT INNER JOIN CPDMS_FUNCTIONS ON EIP_USERMGT.FUNCTIONID = CPDMS_FUNCTIONS.FUNCTIONID INNER JOIN ";
        sql += "EIP_USERROLES ON EIP_USERMGT.USERROLESID = EIP_USERROLES.USERROLESID ";
        sql += "WHERE (EIP_USERROLES.USERROLESID = '" + eipUserRoles.iGM + "') AND (EIP_USERROLES.USERROLESID = '" + eipUserRoles.iVP + "') AND (CPDMS_FUNCTIONS.FUNCTION <> '" + cpdmsFunctionsNames.Finance + "') AND EIP_USERMGT.STATUS = '" + IPStatus.Activated + "' ORDER BY FULLNAME";

        return DataAccess.ExecuteQueryCommand(sql);
    }

    public DataTable ServiceLevelAgreement()
    {
        string sql = "SELECT EIP_GM.IDPROPOSAL, EIP_GM.IDUSERMGT, EIP_GM.STAND, EIP_GM.DATE_RECEIVED ";
        sql += "FROM EIP_GM INNER JOIN EIP_PROPOSAL ON EIP_GM.IDPROPOSAL = EIP_PROPOSAL.IDPROPOSAL ";
        sql += "WHERE (EIP_GM.STAND = '" + SupportState.iSupportApproverStandDefault + "') AND (EIP_PROPOSAL.STATUS = '" + IPStatus.Activated + "')";

        return DataAccess.ExecuteQueryCommand(sql);
    }

    public static bool GMAddCommentProcedure(appUsers CurrentUser, Proposal proposal, string comment, int stand, string dateRev)
    {
        bool success = false;
        SendMail MyMail = new SendMail();
        string[] BPOEmail = { "" };
        string[] IPInitiatorMail = { "" };
        IPInitiator IPInit = new IPInitiator(proposal.IDUSERMGT);
        BusinessProcessOwner BPO = new BusinessProcessOwner(IPInit.iCompanyID);
        IPInitiatorMail[0] = IPInit.sUserMail;
        EPGIPTrackerComment IPTracker = new EPGIPTrackerComment();

        //if (CurrentUser.iUSERROLESID == eipUserRoles.iGM)
        //{
            
            return success;
        //}
    }
}