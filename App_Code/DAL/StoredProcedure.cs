using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;

/// <summary>
/// Summary description for StoredProcedure
/// </summary>

public class StoredProcedure
{
	public StoredProcedure()
	{
		
	}

    public static string getApprovedProposalsByYearOfApproval()
    {
        string sql = getApprovedProposals();
        sql += "AND TO_CHAR(TO_DATE(EIP_PROPOSAL.DATE_LAST_ACTIONED, 'DD-MON-YY') ,'YYYY') = :iYYear ";


        //string sql = "SELECT EIP_PROPOSAL.PROJ_NUM, EIP_PROPOSAL.IDPROPOSAL, EIP_PROPOSAL.PROJ_TITLE, TO_CHAR(EIP_PROPOSAL.DATE_INIT, 'DD-MON-YYYY') AS DATE_INIT, ";
        //sql += "EIP_PROPOSAL.JV, EIP_PROPOSAL.SS, TO_CHAR(EIP_PROPOSAL.DATE_SUBMIT, 'DD-MON-YYYY') AS DATE_SUBMIT, EIP_PROPOSAL.PROJ_DESC, ";
        //sql += "CPDMS_EPPRIORITY.EPPRIORITY, TO_CHAR(EIP_PROPOSAL.DATE_LAST_ACTIONED, 'DD-MON-YYYY') AS DATE_LAST_ACTIONED, ";
        //sql += "INITIATOR.FULLNAME AS PROJ_INIT, INITIATOR.USERMAIL, TO_CHAR(EIP_SUPPORTAPPROVERCOMMENTS.DATE_COMMENT, 'DD-MON-YYYY') ";
        //sql += "AS DATE_COMMENT, APPROVER.FULLNAME AS APPROVEDBY ";
        //sql += "FROM EIP_PROPOSAL ";
        //sql += "INNER JOIN EIP_USERMGT INITIATOR ON EIP_PROPOSAL.IDUSERMGT = INITIATOR.IDUSERMGT ";
        //sql += "INNER JOIN EIP_SUPPORTAPPROVERCOMMENTS ON EIP_PROPOSAL.IDPROPOSAL = EIP_SUPPORTAPPROVERCOMMENTS.IDPROPOSAL ";
        //sql += "INNER JOIN CPDMS_EPPRIORITY ON EIP_PROPOSAL.EPPRIORITYID = CPDMS_EPPRIORITY.EPPRIORITYID ";
        //sql += "INNER JOIN EIP_USERMGT APPROVER ON EIP_SUPPORTAPPROVERCOMMENTS.IDUSERMGT = APPROVER.IDUSERMGT ";
        //sql += "WHERE (EIP_PROPOSAL.STATUS = :STATUS) AND (EIP_PROPOSAL.DOC_STAND = :DOC_STAND) AND (EIP_SUPPORTAPPROVERCOMMENTS.USERROLESID = :REVP OR ";
        //sql += "EIP_SUPPORTAPPROVERCOMMENTS.USERROLESID = :GM) AND (EIP_SUPPORTAPPROVERCOMMENTS.STAND = :STAND) ";
        //sql += "AND TO_CHAR(TO_DATE(EIP_PROPOSAL.DATE_LAST_ACTIONED, 'DD-MON-YY') ,'YYYY') = :iYYear ";
        //sql += "ORDER BY DATE_COMMENT ";

        return sql;
    }

    public static string getApprovedProposals()
    {
        string sql = "SELECT EIP_PROPOSAL.PROJ_NUM, EIP_PROPOSAL.IDPROPOSAL, EIP_PROPOSAL.PROJ_TITLE, TO_CHAR(EIP_PROPOSAL.DATE_INIT, 'DD-MON-YYYY') AS DATE_INIT, ";
        sql += "EIP_PROPOSAL.JV, EIP_PROPOSAL.SS, TO_CHAR(EIP_PROPOSAL.DATE_SUBMIT, 'DD-MON-YYYY') AS DATE_SUBMIT, EIP_PROPOSAL.PROJ_DESC, CPDMS_EPPRIORITY.EPPRIORITY, ";
        sql += "TO_CHAR(EIP_PROPOSAL.DATE_LAST_ACTIONED, 'DD-MON-YYYY') AS DATE_LAST_ACTIONED, INITIATOR.FULLNAME AS PROJ_INIT, INITIATOR.USERMAIL, ";
        sql += "APPROVER.FULLNAME AS APPROVEDBY, APPROVER.IDUSERMGT ";
        sql += "FROM EIP_PROPOSAL ";
        sql += "INNER JOIN EIP_USERMGT INITIATOR ON EIP_PROPOSAL.IDUSERMGT = INITIATOR.IDUSERMGT ";
        sql += "INNER JOIN CPDMS_EPPRIORITY ON EIP_PROPOSAL.EPPRIORITYID = CPDMS_EPPRIORITY.EPPRIORITYID ";
        sql += "INNER JOIN EIP_USERMGT APPROVER ON EIP_PROPOSAL.APPROVEDBY = APPROVER.IDUSERMGT ";
        sql += "WHERE EIP_PROPOSAL.STATUS = :STATUS ";
        sql += "AND EIP_PROPOSAL.DOC_STAND = :DOC_STAND ";
        //sql += "ORDER BY EIP_PROPOSAL.IDPROPOSAL";

        return sql;

        //string sql = "SELECT EIP_PROPOSAL.PROJ_NUM, EIP_PROPOSAL.IDPROPOSAL, EIP_PROPOSAL.PROJ_TITLE, TO_CHAR(EIP_PROPOSAL.DATE_INIT, 'DD-MON-YYYY') AS DATE_INIT, ";
        //sql += "EIP_PROPOSAL.JV, EIP_PROPOSAL.SS, TO_CHAR(EIP_PROPOSAL.DATE_SUBMIT, 'DD-MON-YYYY') AS DATE_SUBMIT, EIP_PROPOSAL.PROJ_DESC, ";
        //sql += "CPDMS_EPPRIORITY.EPPRIORITY, TO_CHAR(EIP_PROPOSAL.DATE_LAST_ACTIONED, 'DD-MON-YYYY') AS DATE_LAST_ACTIONED, ";
        //sql += "INITIATOR.FULLNAME AS PROJ_INIT, INITIATOR.USERMAIL, TO_CHAR(EIP_SUPPORTAPPROVERCOMMENTS.DATE_COMMENT, 'DD-MON-YYYY') ";
        //sql += "AS DATE_COMMENT, APPROVER.FULLNAME AS APPROVEDBY, APPROVER.IDUSERMGT ";
        //sql += "FROM EIP_PROPOSAL ";
        //sql += "INNER JOIN EIP_USERMGT INITIATOR ON EIP_PROPOSAL.IDUSERMGT = INITIATOR.IDUSERMGT ";
        //sql += "INNER JOIN EIP_SUPPORTAPPROVERCOMMENTS ON EIP_PROPOSAL.IDPROPOSAL = EIP_SUPPORTAPPROVERCOMMENTS.IDPROPOSAL ";
        //sql += "INNER JOIN CPDMS_EPPRIORITY ON EIP_PROPOSAL.EPPRIORITYID = CPDMS_EPPRIORITY.EPPRIORITYID ";
        //sql += "INNER JOIN EIP_USERMGT APPROVER ON EIP_PROPOSAL.APPROVEDBY = APPROVER.IDUSERMGT ";
        //sql += "WHERE (EIP_PROPOSAL.STATUS = :STATUS) AND (EIP_PROPOSAL.DOC_STAND = :DOC_STAND) ORDER BY EIP_PROPOSAL.IDPROPOSAL";
        ////sql += "INNER JOIN EIP_USERMGT APPROVER ON EIP_SUPPORTAPPROVERCOMMENTS.IDUSERMGT = APPROVER.IDUSERMGT ";




        //    +
        //       "" +
        //       "" +
        //       "" +
        //       "AND (EIP_SUPPORTAPPROVERCOMMENTS.USERROLESID = :REVP OR ";
        //sql += "EIP_SUPPORTAPPROVERCOMMENTS.USERROLESID = :GM OR EIP_SUPPORTAPPROVERCOMMENTS.USERROLESID = :CERP) ";
        //sql += "AND (EIP_SUPPORTAPPROVERCOMMENTS.STAND = :STAND) ";
        //sql += "ORDER BY EIP_PROPOSAL.IDPROPOSAL";


    }


    public static string getDistinctYear()
    {
        string sql = "SELECT DISTINCT TO_CHAR(TO_DATE(DATE_LAST_ACTIONED, 'DD-MON-YY') ,'YYYY') DATE_LAST_ACTIONED FROM EIP_PROPOSAL WHERE DOC_STAND = :DOC_STAND ORDER BY DATE_LAST_ACTIONED";
        return sql;
    }

    public static string getShellCompanies()
    {
        string sql = "SELECT COMPANYNAME, COMPANYID, COUNTRY, DESCRIPTION FROM CPDMS_SHELLCOMPANIES ORDER BY COMPANYNAME";
        return sql;
    }

    public static string getCompanyByCompanyID()
    {
        string sql = "SELECT COMPANYNAME, COMPANYID, COUNTRY, DESCRIPTION FROM CPDMS_SHELLCOMPANIES WHERE COMPANYID = :COMPANYID";
        return sql;
    }

    public static string getCompanyByCompanyName()
    {
        string sql = "SELECT COMPANYNAME, COMPANYID, COUNTRY, DESCRIPTION FROM CPDMS_SHELLCOMPANIES WHERE COMPANYNAME = :COMPANYNAME";
        return sql;
    }

    public static string getEPPriorities()
    {
        string sql = "SELECT EPPRIORITY, EPPRIORITYID FROM CPDMS_EPPRIORITY";
        return sql;
    }

    public static string reRouteIPtoIPInitiator()
    {
        string sql = "UPDATE EIP_PROPOSAL SET IDUSERMGT = :NEWIDUSERMGT WHERE IDUSERMGT = :OLDIDUSERMGT AND IDPROPOSAL = :IDPROPOSAL";
        return sql;
    }


    public static string getIPFunctions()
    {
        string sql = "SELECT FUNCTION, FUNCTIONID FROM CPDMS_FUNCTIONS ORDER BY FUNCTION";
        return sql;
    }

    public static string getIPFunctionByFunction()
    {
        string sql = "SELECT FUNCTION, FUNCTIONID FROM CPDMS_FUNCTIONS WHERE FUNCTIONID = :FUNCTIONID";
        return sql;
    }

    public static string getOUs()
    {
        string sql = "SELECT COMPANYNAME, COMPANYID FROM CPDMS_SHELLCOMPANIES";
        return sql;
    }

    public static string CreateProposal()
    {
        string sql = "INSERT INTO EIP_PROPOSAL (IDPROPOSAL, PROJ_NUM, PROJ_TITLE, PROJ_DESC, DATE_INIT, EPPRIORITYID, JV, SS, IDUSERMGT, STATUS, DATE_LAST_ACTIONED, PROPOSALFILENAME, DATE_SUBMIT) ";
        sql += "VALUES (:IDPROPOSAL, :PROJ_NUM, :PROJ_TITLE, :PROJ_DESC, :DATE_INIT, :EPPRIORITYID, :JV, :SS, :IDUSERMGT, :STATUS, :DATE_LAST_ACTIONED, :PROPOSALFILENAME, :DATE_SUBMIT)";

        return sql;
    }

    public static string DateProposalLastActioned()
    {
        string sql = "UPDATE EIP_PROPOSAL SET DATE_LAST_ACTIONED = :DATE_LAST_ACTIONED WHERE IDPROPOSAL = :IDPROPOSAL";
        return sql;
    }  

    public static string getAuditTrail()
    {
        string sql = "SELECT EIP_SLA_AUDIT_TRAIL.IDSLA, EIP_PROPOSAL.PROJ_TITLE, EIP_PROPOSAL.PROJ_NUM, TO_CHAR(EIP_SLA_AUDIT_TRAIL.DATE_RECEIVED, 'DD-MON-YYYY')DATE_RECEIVED, ";
        sql += "EIP_SLA_AUDIT_TRAIL.TIME_RECEIVED, EIP_USERMGT.FULLNAME, EIP_USERMGT.USERROLESID, EIP_SUPPORTAPPROVERCOMMENTS.COMMENTS, ";
        sql += "EIP_SUPPORTAPPROVERCOMMENTS.STAND FROM EIP_SLA_AUDIT_TRAIL, EIP_USERMGT, EIP_SUPPORTAPPROVERCOMMENTS, EIP_PROPOSAL ";
        sql += "WHERE (EIP_SLA_AUDIT_TRAIL.IDUSERMGT = EIP_USERMGT.IDUSERMGT) ";
        sql += "AND (EIP_SLA_AUDIT_TRAIL.IDUSERMGT = EIP_SUPPORTAPPROVERCOMMENTS.IDUSERMGT) ";
        sql += "AND (EIP_SLA_AUDIT_TRAIL.IDPROPOSAL = EIP_SUPPORTAPPROVERCOMMENTS.IDPROPOSAL) ";
        sql += "AND (EIP_PROPOSAL.IDPROPOSAL = EIP_SUPPORTAPPROVERCOMMENTS.IDPROPOSAL)";

        return sql;
    }

    public static string getAuditTrailByDate()
    {
        string sql = "SELECT EIP_SLA_AUDIT_TRAIL.IDSLA, EIP_PROPOSAL.PROJ_TITLE, EIP_PROPOSAL.PROJ_NUM, TO_CHAR(EIP_SLA_AUDIT_TRAIL.DATE_RECEIVED, 'DD-MON-YYYY')DATE_RECEIVED, ";
        sql += "EIP_SLA_AUDIT_TRAIL.TIME_RECEIVED, EIP_USERMGT.FULLNAME, EIP_USERMGT.USERROLESID, EIP_SUPPORTAPPROVERCOMMENTS.COMMENTS, ";
        sql += "EIP_SUPPORTAPPROVERCOMMENTS.STAND FROM EIP_SLA_AUDIT_TRAIL, EIP_USERMGT, EIP_SUPPORTAPPROVERCOMMENTS, EIP_PROPOSAL ";
        sql += "WHERE (EIP_SLA_AUDIT_TRAIL.IDUSERMGT = EIP_USERMGT.IDUSERMGT) ";
        sql += "AND (EIP_SLA_AUDIT_TRAIL.IDUSERMGT = EIP_SUPPORTAPPROVERCOMMENTS.IDUSERMGT) ";
        sql += "AND (EIP_SLA_AUDIT_TRAIL.IDPROPOSAL = EIP_SUPPORTAPPROVERCOMMENTS.IDPROPOSAL) ";
        sql += "AND (EIP_PROPOSAL.IDPROPOSAL = EIP_SUPPORTAPPROVERCOMMENTS.IDPROPOSAL) ";
        sql += "AND EIP_SLA_AUDIT_TRAIL.DATE_RECEIVED BETWEEN :FROMDATE AND :TODATE";
        sql += "";

        return sql;
    }

    //public static string getProposals()
    //{
    //    string sql = "SELECT EIP_PROPOSAL.IDPROPOSAL, EIP_PROPOSAL.IDUSERMGT, EIP_PROPOSAL.PROJ_NUM, EIP_PROPOSAL.PROJ_TITLE, TO_CHAR(EIP_PROPOSAL.DATE_INIT, 'DD-MM-YYYY')DATE_INIT, EIP_PROPOSAL.EPPRIORITYID, ";
    //    sql += "EIP_PROPOSAL.JV, EIP_PROPOSAL.SS, EIP_PROPOSAL.PROPOSALFILENAME, TO_CHAR(EIP_PROPOSAL.DATE_SUBMIT, 'DD-MM-YYYY')DATE_SUBMIT, EIP_PROPOSAL.DOC_STAND, EIP_PROPOSAL.STATUS, ";
    //    sql += "EIP_PROPOSAL.NSACOUNTER, EIP_PROPOSAL.PROJ_DESC, TO_CHAR(EIP_PROPOSAL.DATE_LAST_ACTIONED, 'DD-MM-YYYY')DATE_LAST_ACTIONED, EIP_PROPOSAL.DISCONTINUE, EIP_USERMGT.FULLNAME AS PROJ_INIT, EIP_USERMGT.USERMAIL ";
    //    sql += "FROM EIP_PROPOSAL, EIP_USERMGT WHERE (EIP_PROPOSAL.IDUSERMGT = EIP_USERMGT.IDUSERMGT)";

    //    return sql;
    //}

    public static string getProposalByProposalId()
    {
        string sql = "SELECT EIP_PROPOSAL.IDPROPOSAL, EIP_PROPOSAL.IDUSERMGT, EIP_PROPOSAL.PROJ_NUM, EIP_PROPOSAL.PROJ_TITLE, TO_CHAR(EIP_PROPOSAL.DATE_INIT, 'DD-MM-YYYY')DATE_INIT, EIP_PROPOSAL.EPPRIORITYID, ";
        sql += "EIP_PROPOSAL.JV, EIP_PROPOSAL.SS, EIP_PROPOSAL.PROPOSALFILENAME, TO_CHAR(EIP_PROPOSAL.DATE_SUBMIT, 'DD-MM-YYYY')DATE_SUBMIT, EIP_PROPOSAL.DOC_STAND, EIP_PROPOSAL.STATUS, ";
        sql += "EIP_PROPOSAL.NSACOUNTER, EIP_PROPOSAL.PROJ_DESC, TO_CHAR(EIP_PROPOSAL.DATE_LAST_ACTIONED, 'DD-MM-YYYY')DATE_LAST_ACTIONED, EIP_PROPOSAL.DISCONTINUE, EIP_USERMGT.FULLNAME AS PROJ_INIT, EIP_USERMGT.USERMAIL ";
        sql += "FROM EIP_PROPOSAL, EIP_USERMGT WHERE (EIP_PROPOSAL.IDUSERMGT = EIP_USERMGT.IDUSERMGT) AND (IDPROPOSAL = :IDPROPOSAL)";

        return sql;
    }

    public static string eSearchProposal()
    {
        string sql = "SELECT EIP_PROPOSAL.IDPROPOSAL, EIP_PROPOSAL.PROJ_NUM, EIP_PROPOSAL.PROJ_TITLE, EIP_PROPOSAL.PROPOSALFILENAME, EIP_PROPOSAL.IDUSERMGT, ";
        sql += "TO_CHAR(EIP_PROPOSAL.DATE_INIT, 'DD-MON-YYYY')DATE_INIT, EIP_USERMGT.FULLNAME AS PROJ_INIT, EIP_USERMGT.USERMAIL, EIP_PROPOSAL.JV, ";
        sql += "EIP_PROPOSAL.SS, TO_CHAR(EIP_PROPOSAL.DATE_SUBMIT, 'DD-MON-YYYY')DATE_SUBMIT, TO_CHAR(EIP_PROPOSAL.DATE_LAST_ACTIONED, 'DD-MON-YYYY')DATE_LAST_ACTIONED ";
        sql += "FROM EIP_USERMGT INNER JOIN EIP_PROPOSAL ON EIP_USERMGT.IDUSERMGT = EIP_PROPOSAL.IDUSERMGT ";
        sql += "WHERE UPPER(EIP_PROPOSAL.PROJ_TITLE) LIKE :PROJ_TITLE OR UPPER(EIP_PROPOSAL.PROJ_NUM) LIKE :PROJ_NUM ORDER BY EIP_PROPOSAL.IDPROPOSAL";

        return sql;
    }

    public static string getSupportApproversForThisProposal()
    {
        string sql = "SELECT EIP_PROPOSAL.IDPROPOSAL, EIP_USERMGT.IDUSERMGT, EIP_USERMGT.FULLNAME, EIP_USERMGT.USERMAIL, EIP_USERMGT.USERROLESID FROM EIP_PROPOSAL, EIP_SUPPORTAPPROVERCOMMENTS, EIP_USERMGT ";
        sql += "WHERE EIP_PROPOSAL.IDPROPOSAL = EIP_SUPPORTAPPROVERCOMMENTS.IDPROPOSAL AND EIP_SUPPORTAPPROVERCOMMENTS.IDUSERMGT = EIP_USERMGT.IDUSERMGT AND EIP_PROPOSAL.IDPROPOSAL = :IDPROPOSAL";

        return sql;
    }


    #region Pending Proposals Queries

    private static string PropSQL()
    {
        string sql = "SELECT EIP_PROPOSAL.IDPROPOSAL, EIP_PROPOSAL.IDUSERMGT, EIP_PROPOSAL.PROJ_NUM, EIP_PROPOSAL.PROJ_TITLE, TO_CHAR(EIP_PROPOSAL.DATE_INIT, 'DD-MM-YYYY')DATE_INIT, EIP_PROPOSAL.EPPRIORITYID, ";
        sql += "EIP_PROPOSAL.JV, EIP_PROPOSAL.SS, EIP_PROPOSAL.PROPOSALFILENAME, TO_CHAR(EIP_PROPOSAL.DATE_SUBMIT, 'DD-MM-YYYY')DATE_SUBMIT, EIP_PROPOSAL.DOC_STAND, EIP_PROPOSAL.STATUS, ";
        sql += "EIP_PROPOSAL.NSACOUNTER, EIP_PROPOSAL.PROJ_DESC, TO_CHAR(EIP_PROPOSAL.DATE_LAST_ACTIONED, 'DD-MM-YYYY')DATE_LAST_ACTIONED, EIP_PROPOSAL.DISCONTINUE, EIP_USERMGT.FULLNAME AS PROJ_INIT, EIP_USERMGT.USERMAIL ";
        sql += "FROM EIP_PROPOSAL, EIP_USERMGT ";
        return sql;
    }

    public static string getPendingProposals()
    {
        string sql = PropSQL();
        sql += "WHERE (EIP_PROPOSAL.IDUSERMGT = EIP_USERMGT.IDUSERMGT) AND (EIP_PROPOSAL.STATUS = :STATUS) ";
        sql += "AND (EIP_PROPOSAL.DOC_STAND <> :DOC_STAND) AND (EIP_PROPOSAL.DISCONTINUE <> :DISCONTINUE) ORDER BY EIP_PROPOSAL.IDPROPOSAL DESC";

        return sql;
    }

    public static string MyPendingProposals()
    {
        string sql = "SELECT EIP_PROPOSAL.IDPROPOSAL, EIP_PROPOSAL.IDUSERMGT, EIP_PROPOSAL.PROJ_NUM, EIP_PROPOSAL.PROJ_TITLE, EIP_PROPOSAL.PROPOSALFILENAME, EIP_PROPOSAL.JV, EIP_PROPOSAL.SS, ";
        sql += "TO_CHAR(EIP_PROPOSAL.DATE_INIT, 'DD-MM-YYYY')DATE_INIT, EIP_USERMGT.FULLNAME AS PROJ_INIT, TO_CHAR(EIP_PROPOSAL.DATE_SUBMIT, 'DD-MM-YYYY')DATE_SUBMIT, EIP_PROPOSAL.EPPRIORITYID, ";
        sql += "EIP_PROPOSAL.NSACOUNTER, EIP_PROPOSAL.PROJ_DESC, EIP_PROPOSAL.DOC_STAND, EIP_PROPOSAL.DISCONTINUE, EIP_PROPOSAL.STATUS, TO_CHAR(EIP_PROPOSAL.DATE_LAST_ACTIONED, 'DD-MM-YYYY')DATE_LAST_ACTIONED FROM EIP_PROPOSAL ";
        sql += "INNER JOIN EIP_USERMGT ON EIP_PROPOSAL.IDUSERMGT = EIP_USERMGT.IDUSERMGT ";
        sql += "WHERE (EIP_PROPOSAL.IDUSERMGT = :IDUSERMGT) AND (EIP_PROPOSAL.DOC_STAND <> :DOC_STAND) AND (EIP_PROPOSAL.STATUS = :STATUS) ORDER BY DATE_SUBMIT DESC";
        //sql += "WHERE (EIP_PROPOSAL.IDUSERMGT = :IDUSERMGT) AND (EIP_PROPOSAL.STATUS = :apprSTATUS) AND (EIP_PROPOSAL.STATUS <> :deacSTATUS) AND (EIP_PROPOSAL.STATUS <> :discSTATUS) ORDER BY DATE_SUBMIT DESC";

        return sql;
    }

    public static string ProposalsPendingMyAction()
    {
        string sql = "SELECT EIP_PROPOSAL.IDPROPOSAL, EIP_PROPOSAL.PROJ_NUM, EIP_PROPOSAL.PROJ_TITLE, EIP_PROPOSAL.PROPOSALFILENAME, EIP_PROPOSAL.JV, EIP_PROPOSAL.SS, TO_CHAR(EIP_PROPOSAL.DATE_INIT, 'DD-MM-YYYY')DATE_INIT, ";
        sql += "EIP_USERMGT.FULLNAME AS PROJ_INIT, TO_CHAR(EIP_PROPOSAL.DATE_SUBMIT, 'DD-MM-YYYY')DATE_SUBMIT, TO_CHAR(EIP_PROPOSAL.DATE_LAST_ACTIONED, 'DD-MM-YYYY')DATE_LAST_ACTIONED FROM EIP_PROPOSAL ";
        sql += "INNER JOIN EIP_SUPPORTAPPROVERCOMMENTS ON EIP_PROPOSAL.IDPROPOSAL = EIP_SUPPORTAPPROVERCOMMENTS.IDPROPOSAL ";
        sql += "INNER JOIN EIP_USERMGT ON EIP_PROPOSAL.IDUSERMGT = EIP_USERMGT.IDUSERMGT ";
        sql += "WHERE (EIP_SUPPORTAPPROVERCOMMENTS.IDUSERMGT = :IDUSERMGT) AND ((EIP_SUPPORTAPPROVERCOMMENTS.STAND = :xSTAND) OR (EIP_SUPPORTAPPROVERCOMMENTS.STAND = :ySTAND) OR (EIP_SUPPORTAPPROVERCOMMENTS.STAND = :zSTAND))";

        //string sql = "SELECT EIP_PROPOSAL.IDPROPOSAL, EIP_PROPOSAL.PROJ_NUM, EIP_PROPOSAL.PROJ_TITLE, EIP_PROPOSAL.PROPOSALFILENAME, EIP_PROPOSAL.JV, EIP_PROPOSAL.SS, TO_CHAR(EIP_PROPOSAL.DATE_INIT, 'DD-MM-YYYY')DATE_INIT, ";
        //sql += "EIP_USERMGT.FULLNAME AS PROJ_INIT, TO_CHAR(EIP_PROPOSAL.DATE_SUBMIT, 'DD-MM-YYYY')DATE_SUBMIT, TO_CHAR(EIP_PROPOSAL.DATE_LAST_ACTIONED, 'DD-MM-YYYY')DATE_LAST_ACTIONED FROM EIP_PROPOSAL ";
        //sql += "INNER JOIN EIP_SUPPORTAPPROVERCOMMENTS ON EIP_PROPOSAL.IDPROPOSAL = EIP_SUPPORTAPPROVERCOMMENTS.IDPROPOSAL ";
        //sql += "INNER JOIN EIP_USERMGT ON EIP_PROPOSAL.IDUSERMGT = EIP_USERMGT.IDUSERMGT ";
        //sql += "WHERE (EIP_SUPPORTAPPROVERCOMMENTS.IDUSERMGT = :IDUSERMGT) AND (EIP_SUPPORTAPPROVERCOMMENTS.IDPROPOSAL = EIP_PROPOSAL.IDPROPOSAL) ";
        //sql += "AND ((EIP_SUPPORTAPPROVERCOMMENTS.STAND = :xSTAND) OR (EIP_SUPPORTAPPROVERCOMMENTS.STAND = :ySTAND) OR (EIP_SUPPORTAPPROVERCOMMENTS.STAND = :zSTAND))";

        //string sql = "SELECT EIP_PROPOSAL.PROJ_TITLE, EIP_PROPOSAL.PROJ_NUM FROM EIP_SUPPORTAPPROVERCOMMENTS, EIP_PROPOSAL ";


        return sql;
    }


    public static string approverSupportPendingProposals()
    {
        //TODO: ensure this query works for all senarios. This is very important for the success of this application
        string sql = "SELECT EIP_PROPOSAL.IDPROPOSAL, EIP_SUPPORTAPPROVERCOMMENTS.IDUSERMGT, EIP_PROPOSAL.PROJ_NUM, EIP_USERMGT.FULLNAME AS PROJ_INIT, TO_CHAR(EIP_PROPOSAL.DATE_INIT, 'DD-MON-YYYY') AS DATE_INIT, ";
        sql += "TO_CHAR(EIP_PROPOSAL.DATE_SUBMIT, 'DD-MON-YYYY') AS DATE_SUBMIT, EIP_SUPPORTAPPROVERCOMMENTS.STAND, EIP_PROPOSAL.DOC_STAND, EIP_PROPOSAL.PROJ_TITLE, EIP_SUPPORTAPPROVERCOMMENTS.COMMENTS, ";
        sql += "TO_CHAR(EIP_SUPPORTAPPROVERCOMMENTS.DATE_COMMENT, 'DD-MON-YYYY') AS DATE_COMMENT FROM EIP_PROPOSAL ";
        sql += "INNER JOIN EIP_SUPPORTAPPROVERCOMMENTS ON EIP_PROPOSAL.IDPROPOSAL = EIP_SUPPORTAPPROVERCOMMENTS.IDPROPOSAL ";
        sql += "INNER JOIN EIP_USERMGT ON EIP_PROPOSAL.IDUSERMGT = EIP_USERMGT.IDUSERMGT ";
        sql += "WHERE (EIP_SUPPORTAPPROVERCOMMENTS.IDUSERMGT = :IDUSERMGT) ";
        sql += "AND ((EIP_SUPPORTAPPROVERCOMMENTS.SUPPORT_BIT = :SUPPORT_BIT) OR (EIP_SUPPORTAPPROVERCOMMENTS.STAND = :notSuppSTAND) OR (EIP_SUPPORTAPPROVERCOMMENTS.STAND = :defaultSTAND)) ";
        sql += "AND ((EIP_PROPOSAL.STATUS <> :Discontinued) OR (EIP_PROPOSAL.STATUS <> :Deactivated))";

        return sql;
    }

    public static string BPOPendingProposals()
    {
        string sql = "SELECT EIP_PROPOSAL.IDPROPOSAL, EIP_PROPOSAL.PROJ_NUM, EIP_PROPOSAL.PROJ_TITLE, TO_CHAR(EIP_PROPOSAL.DATE_INIT, 'DD-MON-YYYY') AS DATE_INIT, BPO.FULLNAME, EIP_PROPOSAL.JV, EIP_PROPOSAL.SS, ";
        sql += "TO_CHAR(EIP_PROPOSAL.DATE_SUBMIT, 'DD-MON-YYYY') AS DATE_SUBMIT, EIP_PROPOSAL.DOC_STAND, IPINITIATOR.FULLNAME AS PROJ_INIT, IPINITIATOR.USERMAIL FROM EIP_SUPPORTAPPROVERCOMMENTS ";
        sql += "INNER JOIN EIP_USERMGT BPO ON EIP_SUPPORTAPPROVERCOMMENTS.IDUSERMGT = BPO.IDUSERMGT INNER JOIN EIP_PROPOSAL ON EIP_SUPPORTAPPROVERCOMMENTS.IDPROPOSAL = EIP_PROPOSAL.IDPROPOSAL ";
        sql += "INNER JOIN EIP_USERMGT IPINITIATOR ON EIP_PROPOSAL.IDUSERMGT = IPINITIATOR.IDUSERMGT WHERE (EIP_SUPPORTAPPROVERCOMMENTS.IDUSERMGT = :IDUSERMGT) AND (EIP_PROPOSAL.STATUS = :STATUS) ";
        sql += "AND ((EIP_SUPPORTAPPROVERCOMMENTS.STAND <> :STAND) OR (EIP_PROPOSAL.DOC_STAND <> :DOC_STAND)) ORDER BY EIP_PROPOSAL.IDPROPOSAL DESC";

        return sql;
    }

    public static string ProposalsPendingMySuppportApproval()
    {
        string sql = "SELECT EIP_PROPOSAL.IDPROPOSAL, EIP_SUPPORTAPPROVERCOMMENTS.IDUSERMGT, EIP_PROPOSAL.PROJ_NUM, EIP_USERMGT.FULLNAME AS PROJ_INIT, ";
        sql += "TO_CHAR(EIP_PROPOSAL.DATE_INIT, 'DD-MON-YYYY') AS DATE_INIT, TO_CHAR(EIP_PROPOSAL.DATE_SUBMIT, 'DD-MON-YYYY') AS DATE_SUBMIT, ";
        sql += "EIP_SUPPORTAPPROVERCOMMENTS.STAND, EIP_PROPOSAL.DOC_STAND, EIP_PROPOSAL.PROJ_TITLE, EIP_SUPPORTAPPROVERCOMMENTS.COMMENTS, ";
        sql += "TO_CHAR(EIP_SUPPORTAPPROVERCOMMENTS.DATE_COMMENT, 'DD-MON-YYYY') AS DATE_COMMENT, TO_CHAR(EIP_PROPOSAL.DATE_LAST_ACTIONED, 'DD-MON-YYYY')DATE_LAST_ACTIONED FROM EIP_PROPOSAL INNER JOIN ";
        sql += "EIP_SUPPORTAPPROVERCOMMENTS ON EIP_PROPOSAL.IDPROPOSAL = EIP_SUPPORTAPPROVERCOMMENTS.IDPROPOSAL INNER JOIN ";
        sql += "EIP_USERMGT ON EIP_PROPOSAL.IDUSERMGT = EIP_USERMGT.IDUSERMGT ";
        sql += "WHERE (EIP_SUPPORTAPPROVERCOMMENTS.IDUSERMGT = :IDUSERMGT) AND (EIP_PROPOSAL.STATUS = :STATUS) ";
        sql += "AND (EIP_PROPOSAL.DISCONTINUE <> :DISCONTINUE) ";
        sql += "AND ((EIP_SUPPORTAPPROVERCOMMENTS.STAND = :STAND) OR (EIP_SUPPORTAPPROVERCOMMENTS.STAND <> :STAND2))";
        //(EIP_SUPPORTAPPROVERCOMMENTS.SUPPORT_BIT = :SUPPORT_BIT) OR  AND (EIP_PROPOSAL.DOC_STAND <> :DOC_STAND) 

        return sql;
    }

    public static string TProposals()
    {
        string sql = "SELECT EIP_PROPOSAL.IDPROPOSAL, EIP_SUPPORTAPPROVERCOMMENTS.IDUSERMGT, EIP_PROPOSAL.PROJ_NUM, EIP_USERMGT.FULLNAME AS PROJ_INIT, ";
        sql += "TO_CHAR(EIP_PROPOSAL.DATE_INIT, 'DD-MON-YYYY') AS DATE_INIT, TO_CHAR(EIP_PROPOSAL.DATE_SUBMIT, 'DD-MON-YYYY') AS DATE_SUBMIT, ";
        sql += "EIP_SUPPORTAPPROVERCOMMENTS.STAND, EIP_PROPOSAL.DOC_STAND, EIP_PROPOSAL.PROJ_TITLE, EIP_SUPPORTAPPROVERCOMMENTS.COMMENTS, ";
        sql += "TO_CHAR(EIP_SUPPORTAPPROVERCOMMENTS.DATE_COMMENT, 'DD-MON-YYYY') AS DATE_COMMENT, TO_CHAR(EIP_PROPOSAL.DATE_LAST_ACTIONED, 'DD-MON-YYYY')DATE_LAST_ACTIONED FROM EIP_PROPOSAL INNER JOIN ";
        sql += "EIP_SUPPORTAPPROVERCOMMENTS ON EIP_PROPOSAL.IDPROPOSAL = EIP_SUPPORTAPPROVERCOMMENTS.IDPROPOSAL INNER JOIN ";
        sql += "EIP_USERMGT ON EIP_PROPOSAL.IDUSERMGT = EIP_USERMGT.IDUSERMGT ";

        sql += "AND(EIP_SUPPORTAPPROVERCOMMENTS.STAND <> :STAND) ";
        sql += "AND(EIP_SUPPORTAPPROVERCOMMENTS.STAND <> :STAND2) ";

        sql += "WHERE (EIP_SUPPORTAPPROVERCOMMENTS.IDUSERMGT = :IDUSERMGT) AND (EIP_PROPOSAL.STATUS = :STATUS) ";
        sql += "AND (EIP_PROPOSAL.DISCONTINUE <> :DISCONTINUE) ";

        return sql;
    }


    public static string MyRejectedProposals()
    {
        string sql = TProposals();
        sql += "AND (EIP_PROPOSAL.DOC_STAND = :DOC_STAND)";

        return sql;
    }

    //

    public static string ProposalsPendingMySuppportApproval2()
    {
        string sql = TProposals();
        sql += "AND (EIP_PROPOSAL.DOC_STAND <> :DOC_STAND)";

        return sql;
    }


    #endregion

    #region Discontinued Proposals Queries

    public static string getDiscontinuedProposals()
    {
        string sql = "SELECT EIP_PROPOSAL.IDPROPOSAL, EIP_PROPOSAL.PROJ_NUM, EIP_PROPOSAL.PROJ_TITLE, TO_CHAR(EIP_PROPOSAL.DATE_INIT, 'DD-MON-YYYY')DATE_INIT, ";
        sql += "EIP_PROPOSAL.JV, EIP_PROPOSAL.SS, EIP_PROPOSAL.PROPOSALFILENAME, TO_CHAR(EIP_PROPOSAL.DATE_SUBMIT, 'DD-MON-YYYY')DATE_SUBMIT, ";
        sql += "TO_CHAR(EIP_PROPOSAL.DATE_LAST_ACTIONED, 'DD-MON-YYYY')DATE_LAST_ACTIONED, EIP_USERMGT.FULLNAME AS PROJ_INIT, EIP_USERMGT.USERMAIL ";
        sql += "FROM EIP_PROPOSAL, EIP_USERMGT WHERE (EIP_PROPOSAL.IDUSERMGT = EIP_USERMGT.IDUSERMGT) AND (EIP_PROPOSAL.STATUS = :STATUS) ";
        sql += "AND (EIP_PROPOSAL.DISCONTINUE = :DISCONTINUE)";

        return sql;
    }
    #endregion

    #region Approved Proposals Queries


    public static string MyApprovedProposals()
    {
        string sql = "SELECT EIP_PROPOSAL.PROJ_NUM, EIP_PROPOSAL.IDPROPOSAL, EIP_PROPOSAL.PROJ_TITLE, TO_CHAR(EIP_PROPOSAL.DATE_INIT, 'DD-MON-YYYY') AS DATE_INIT, ";
        sql += "EIP_PROPOSAL.JV, EIP_PROPOSAL.SS, TO_CHAR(EIP_PROPOSAL.DATE_SUBMIT, 'DD-MON-YYYY') AS DATE_SUBMIT, EIP_PROPOSAL.PROJ_DESC, ";
        sql += "CPDMS_EPPRIORITY.EPPRIORITY, TO_CHAR(EIP_PROPOSAL.DATE_LAST_ACTIONED, 'DD-MON-YYYY') AS DATE_LAST_ACTIONED, ";
        sql += "INITIATOR.FULLNAME AS PROJ_INIT, INITIATOR.USERMAIL, TO_CHAR(EIP_SUPPORTAPPROVERCOMMENTS.DATE_COMMENT, 'DD-MON-YYYY') ";
        sql += "AS DATE_COMMENT, APPROVER.FULLNAME AS APPROVEDBY ";
        sql += "FROM EIP_PROPOSAL ";
        sql += "INNER JOIN EIP_USERMGT INITIATOR ON EIP_PROPOSAL.IDUSERMGT = INITIATOR.IDUSERMGT ";
        sql += "INNER JOIN EIP_SUPPORTAPPROVERCOMMENTS ON EIP_PROPOSAL.IDPROPOSAL = EIP_SUPPORTAPPROVERCOMMENTS.IDPROPOSAL ";
        sql += "INNER JOIN CPDMS_EPPRIORITY ON EIP_PROPOSAL.EPPRIORITYID = CPDMS_EPPRIORITY.EPPRIORITYID ";
        sql += "INNER JOIN EIP_USERMGT APPROVER ON EIP_SUPPORTAPPROVERCOMMENTS.IDUSERMGT = APPROVER.IDUSERMGT ";
        sql += "WHERE (EIP_PROPOSAL.IDUSERMGT = :IDUSERMGT) AND (EIP_PROPOSAL.DOC_STAND = :DOC_STAND) ";
        sql += "AND ((EIP_SUPPORTAPPROVERCOMMENTS.USERROLESID = :REVP) OR (EIP_SUPPORTAPPROVERCOMMENTS.USERROLESID = :GM)) ORDER BY DATE_COMMENT";

        return sql;
    }

    public static string MyProposalActivityHistory()
    {
        string sql = "SELECT EIP_USERMGT.FULLNAME, EIP_SUPPORTAPPROVERCOMMENTS.STAND, EIP_SUPPORTAPPROVERCOMMENTS.COMMENTS, EIP_SUPPORTAPPROVERCOMMENTS.USERROLESID, ";
        sql += "TO_CHAR(EIP_SUPPORTAPPROVERCOMMENTS.DATE_COMMENT, 'DD-MON-YYYY') AS DATE_COMMENT, TO_CHAR(EIP_SUPPORTAPPROVERCOMMENTS.DATE_RECEIVED, 'DD-MON-YYYY') AS DATE_RECEIVED, ";
        sql += "EIP_PROPOSAL.PROJ_TITLE, EIP_PROPOSAL.PROJ_NUM, EIP_PROPOSAL.PROJ_DESC FROM EIP_SUPPORTAPPROVERCOMMENTS ";
        sql += "INNER JOIN EIP_USERMGT ON EIP_SUPPORTAPPROVERCOMMENTS.IDUSERMGT = EIP_USERMGT.IDUSERMGT ";
        sql += "INNER JOIN EIP_PROPOSAL ON EIP_SUPPORTAPPROVERCOMMENTS.IDPROPOSAL = EIP_PROPOSAL.IDPROPOSAL ";
        sql += "WHERE EIP_SUPPORTAPPROVERCOMMENTS.IDUSERMGT = :sIdUser";

        return sql;
    }

    public static string approvedProposalByYearOfApproval()
    {
        string sql = "SELECT EIP_PROPOSAL.IDPROPOSAL, EIP_PROPOSAL.PROJ_NUM, EIP_PROPOSAL.PROJ_TITLE, TO_CHAR(EIP_PROPOSAL.DATE_INIT, 'DD-MON-YYYY') AS DATE_INIT, ";
        sql += "EIP_PROPOSAL.JV, EIP_PROPOSAL.SS, TO_CHAR(EIP_PROPOSAL.DATE_SUBMIT, 'DD-MON-YYYY') AS DATE_SUBMIT, EIP_PROPOSAL.PROJ_DESC, ";
        sql += "CPDMS_EPPRIORITY.EPPRIORITY, TO_CHAR(EIP_PROPOSAL.DATE_LAST_ACTIONED, 'DD-MON-YYYY') AS DATE_LAST_ACTIONED, ";
        sql += "EIP_USERMGT.FULLNAME AS PROJ_INIT, EIP_USERMGT.USERMAIL, TO_CHAR(EIP_SUPPORTAPPROVERCOMMENTS.DATE_COMMENT, 'DD-MON-YYYY')AS DATE_COMMENT, APPROVER.FULLNAME AS APPROVEDBY ";
        sql += "FROM EIP_USERMGT APPROVER, EIP_SUPPORTAPPROVERCOMMENTS, EIP_PROPOSAL, EIP_USERMGT, CPDMS_EPPRIORITY ";
        sql += "WHERE APPROVER.IDUSERMGT = EIP_SUPPORTAPPROVERCOMMENTS.IDUSERMGT ";
        sql += "AND EIP_SUPPORTAPPROVERCOMMENTS.IDPROPOSAL = EIP_PROPOSAL.IDPROPOSAL AND EIP_SUPPORTAPPROVERCOMMENTS.IDPROPOSAL = EIP_PROPOSAL.IDPROPOSAL ";
        sql += "AND EIP_PROPOSAL.IDUSERMGT = EIP_USERMGT.IDUSERMGT AND EIP_PROPOSAL.EPPRIORITYID = CPDMS_EPPRIORITY.EPPRIORITYID ";
        sql += "AND (EIP_PROPOSAL.DOC_STAND = :DOC_STAND) AND (EIP_PROPOSAL.IDUSERMGT = :IDUSERMGT) ";
        sql += "AND ((EIP_SUPPORTAPPROVERCOMMENTS.USERROLESID = :GM) OR (EIP_SUPPORTAPPROVERCOMMENTS.USERROLESID = :REVP))";
        sql += "AND TO_CHAR(TO_DATE(EIP_PROPOSAL.DATE_LAST_ACTIONED, 'DD-MON-YY') ,'YYYY') = :YYEAR";

        return sql;
    }

    #endregion


    public static string getProposalSupportDetailsByProposalId()
    {
        string sql = "SELECT IDCOMMENTS, IDPROPOSAL, IDUSERMGT, STAND, COMMENTS, TO_CHAR(DATE_COMMENT, 'DD-MON-YYYY')DATE_COMMENT, TO_CHAR(DATE_RECEIVED, 'DD-MON-YYYY')DATE_RECEIVED, USERROLESID, SUPPORT_BIT ";
        sql += "FROM EIP_SUPPORTAPPROVERCOMMENTS WHERE IDPROPOSAL = :IDPROPOSAL";

        return sql;
    }

    public static string DeleteProposal()
    {
        string sql = "UPDATE EIP_PROPOSAL SET STATUS = :STATUS WHERE IDPROPOSAL = :IDPROPOSAL";
        return sql;
    }

    public static string UndeleteProposal()
    {
        string sql = "UPDATE EIP_PROPOSAL SET STATUS = :STATUS WHERE IDPROPOSAL = :IDPROPOSAL";
        return sql;
    }

    public static string DiscontinueReactivateProposal()
    {
        string sql = "UPDATE EIP_PROPOSAL SET DISCONTINUE = :DISCONTINUE WHERE IDPROPOSAL = :IDPROPOSAL";
        return sql;
    }

    public static string getProposalSupportDetailsByProposalUserId()
    {
        string sql = "SELECT IDCOMMENTS, IDPROPOSAL, SUPPORT_BIT, IDUSERMGT, STAND, COMMENTS, TO_CHAR(DATE_COMMENT, 'DD-MON-YYYY')DATE_COMMENT, TO_CHAR(DATE_RECEIVED, 'DD-MON-YYYY')DATE_RECEIVED, USERROLESID ";
        sql += "FROM EIP_SUPPORTAPPROVERCOMMENTS WHERE (IDUSERMGT = :IDUSERMGT) AND (IDPROPOSAL = :IDPROPOSAL)";

        return sql;
    }

    public static string getNonMandatoryFunctionalSupport()
    {
        string sql = "SELECT EIP_SUPPORTAPPROVERCOMMENTS.IDUSERMGT, EIP_USERMGT.USERMAIL, EIP_USERMGT.FULLNAME, EIP_USERMGT.USERNAME, ";
        sql += "EIP_SUPPORTAPPROVERCOMMENTS.USERROLESID, EIP_USERMGT.FUNCTIONID, EIP_USERMGT.COMPANYID, EIP_USERMGT.SYSADMINEXT, ";
        sql += "EIP_USERMGT.STATUS, EIP_USERMGT.FLAG_COLOR, EIP_USERMGT.EPNIGERIALOGIC, EIP_USERMGT.IDIPLIMIT FROM EIP_SUPPORTAPPROVERCOMMENTS ";
        sql += "INNER JOIN EIP_USERMGT ON EIP_SUPPORTAPPROVERCOMMENTS.IDUSERMGT = EIP_USERMGT.IDUSERMGT ";
        sql += "WHERE (EIP_SUPPORTAPPROVERCOMMENTS.IDPROPOSAL = :IDPROPOSAL) AND (EIP_SUPPORTAPPROVERCOMMENTS.STAND = :iStand)";

        return sql;
    }


    public static string assignProposalToNextSupportApprover()
    {
        string sql = "INSERT INTO EIP_SUPPORTAPPROVERCOMMENTS (IDUSERMGT, IDPROPOSAL, USERROLESID, DATE_RECEIVED) VALUES (:IDUSERMGT, :IDPROPOSAL, :USERROLESID, :DATE_RECEIVED)";
        return sql;
    }

    public static string ReRouteIP()
    {
        string sql = "UPDATE EIP_SUPPORTAPPROVERCOMMENTS SET IDUSERMGT = :IDUSERMGT WHERE (IDPROPOSAL = :IDPROPOSAL) AND (IDUSERMGT= :oldIDUSERMGT)";
        return sql;
    }


    public static string getDeletedProposals()
    {
        string sql = "SELECT EIP_PROPOSAL.IDPROPOSAL, EIP_PROPOSAL.PROJ_NUM, EIP_PROPOSAL.PROJ_TITLE, TO_CHAR(EIP_PROPOSAL.DATE_INIT, 'DD-MM-YYYY')DATE_INIT, ";
        sql += "EIP_PROPOSAL.JV, EIP_PROPOSAL.SS, EIP_PROPOSAL.PROPOSALFILENAME, TO_CHAR(EIP_PROPOSAL.DATE_SUBMIT, 'DD-MM-YYYY')DATE_SUBMIT, ";
        sql += "TO_CHAR(EIP_PROPOSAL.DATE_LAST_ACTIONED, 'DD-MM-YYYY')DATE_LAST_ACTIONED, EIP_USERMGT.FULLNAME AS PROJ_INIT, EIP_USERMGT.USERMAIL ";
        sql += "FROM EIP_PROPOSAL, EIP_USERMGT ";
        sql += "WHERE (EIP_PROPOSAL.IDUSERMGT = EIP_USERMGT.IDUSERMGT) AND EIP_PROPOSAL.STATUS = :STATUS";

        return sql;
    }

    public static string CloseGMREPlanIntray()
    {
        string sql = "UPDATE EIP_SUPPORTAPPROVERCOMMENTS SET STAND = :STAND, SUPPORT_BIT = :SUPPORT_BIT WHERE (IDPROPOSAL = :IDPROPOSAL) AND (IDUSERMGT = :IDUSERMGT)";
        return sql;
    }

    public static string UpdateProposalStatus()
    {
        string sql = "UPDATE EIP_PROPOSAL SET DOC_STAND = :DOC_STAND WHERE IDPROPOSAL = :IDPROPOSAL";
        return sql;
    }

    public static string DefaultRoleAbsenceMgt()
    {
        string sql = "UPDATE EIP_USERMGT SET FLAG_COLOR = :FLAG_COLOR WHERE IDUSERMGT = :IDUSERMGT";
        return sql;
    }

    public static string RouteProposalToNewDefaultRole()
    {
        string sql = "UPDATE EIP_SUPPORTAPPROVERCOMMENTS SET IDUSERMGT = :IDUSERMGT WHERE (USERROLESID = :USERROLESID) ";
        sql += "AND IDPROPOSAL IN (SELECT IDPROPOSAL FROM EIP_PROPOSAL WHERE DOC_STAND <> :DOC_STAND)";
        return sql;
    }

    public static string UpdateFileName()
    {
        string sql = "UPDATE EIP_PROPOSAL SET PROPOSALFILENAME = :PROPOSALFILENAME WHERE IDPROPOSAL = :IDPROPOSAL";
        return sql;
    }


    public static string ForwardProposal()
    {
        string sql = "INSERT INTO EIP_SUPPORTAPPROVERCOMMENTS (IDPROPOSAL, IDUSERMGT, DATE_RECEIVED) VALUES (:IDPROPOSAL, :IDUSERMGT, :DATE_RECEIVED)";
        return sql;
    }

    public static string LoadMyMenu()
    {
        string sql = "SELECT EIP_MENU_BUILDER.MENUID, EIP_MENU_BUILDER.TITLE, EIP_MENU_BUILDER.DESCRIPTION, EIP_MENU_BUILDER.NAVIGATEURL, ";
        sql += "EIP_MENU_BUILDER.PARENTID FROM EIP_USERROLES ";
        sql += "INNER JOIN EIP_MENU_USERROLE ON EIP_USERROLES.USERROLESID = EIP_MENU_USERROLE.USERROLESID ";
        sql += "INNER JOIN EIP_MENU_BUILDER ON EIP_MENU_USERROLE.MENUID = EIP_MENU_BUILDER.MENUID ";
        sql += "WHERE EIP_USERROLES.USERROLESID = :USERROLESID ORDER BY TITLE";

        return sql;
    }

    public static string getMyProposalHistory()
    {
        string sql = "SELECT EIP_PROPOSAL.IDPROPOSAL, EIP_SUPPORTAPPROVERCOMMENTS.IDUSERMGT, EIP_PROPOSAL.PROJ_NUM, EIP_USERMGT.FULLNAME AS PROJ_INIT, TO_CHAR(EIP_PROPOSAL.DATE_LAST_ACTIONED, 'DD-MON-YYYY')DATE_LAST_ACTIONED, ";
        sql += "TO_CHAR(EIP_PROPOSAL.DATE_INIT, 'DD-MON-YYYY')DATE_INIT, TO_CHAR(EIP_PROPOSAL.DATE_SUBMIT, 'DD-MON-YYYY')DATE_SUBMIT, EIP_SUPPORTAPPROVERCOMMENTS.STAND, ";
        sql += "EIP_PROPOSAL.DOC_STAND, EIP_PROPOSAL.PROJ_TITLE, EIP_SUPPORTAPPROVERCOMMENTS.COMMENTS, TO_CHAR(EIP_SUPPORTAPPROVERCOMMENTS.DATE_COMMENT, 'DD-MON-YYYY')DATE_COMMENT ";
        sql += "FROM EIP_PROPOSAL, EIP_SUPPORTAPPROVERCOMMENTS, EIP_USERMGT ";
        sql += "WHERE (EIP_SUPPORTAPPROVERCOMMENTS.IDUSERMGT = :IDUSERMGT) AND (EIP_PROPOSAL.IDPROPOSAL = EIP_SUPPORTAPPROVERCOMMENTS.IDPROPOSAL) ";
        sql += "AND (EIP_PROPOSAL.IDUSERMGT = EIP_USERMGT.IDUSERMGT) AND ((EIP_SUPPORTAPPROVERCOMMENTS.STAND = :STAND) OR (EIP_SUPPORTAPPROVERCOMMENTS.STAND = :STAND2) OR (EIP_SUPPORTAPPROVERCOMMENTS.STAND = :STAND3))";

        return sql;
    }

    

    public static string getSLASettings()
    {
        string sql = "SELECT ASLA, FSSLA, UNDERCONSTR, UNDERAPPROVAL, WITHINSLA, OUTSIDESLA, EXCEEDSLA FROM EIP_SLA";
        return sql;
    }

    public static string AddComment()
    {
        string sql = "UPDATE EIP_SUPPORTAPPROVERCOMMENTS SET STAND = :STAND, COMMENTS = :COMMENTS, DATE_COMMENT = :DATE_COMMENT, SUPPORT_BIT = :SUPPORT_BIT ";
        sql += "WHERE (IDPROPOSAL = :IDPROPOSAL) AND (IDUSERMGT = :IDUSERMGT)";

        return sql;
    }

    
    #region EIP Users 

    public static string getUsers()
    {
        string sql = "SELECT IDUSERMGT, USERNAME, FULLNAME, USERMAIL, USERROLESID, FUNCTIONID, FLAG_COLOR, COMPANYID, IDIPLIMIT, SYSADMINEXT, STATUS, EPNIGERIALOGIC, IDIPLIMIT FROM EIP_USERMGT ORDER BY FULLNAME";
        return sql;
    }

    public static string getActiveUsers()
    {
        string sql = "SELECT EIP_USERMGT.IDUSERMGT, EIP_USERMGT.USERNAME, EIP_USERMGT.FULLNAME, EIP_USERMGT.USERMAIL, EIP_USERMGT.USERROLESID, CPDMS_FUNCTIONS.FUNCTION, CPDMS_FUNCTIONS.FUNCTIONID, ";
        sql += "EIP_USERMGT.FLAG_COLOR, CPDMS_SHELLCOMPANIES.COMPANYNAME, CPDMS_SHELLCOMPANIES.COMPANYID, EIP_USERMGT.IDIPLIMIT, EIP_USERMGT.SYSADMINEXT ";
        sql += "FROM CPDMS_FUNCTIONS INNER JOIN EIP_USERMGT ON CPDMS_FUNCTIONS.FUNCTIONID = EIP_USERMGT.FUNCTIONID ";
        sql += "INNER JOIN CPDMS_SHELLCOMPANIES ON EIP_USERMGT.COMPANYID = CPDMS_SHELLCOMPANIES.COMPANYID ";
        sql += "WHERE EIP_USERMGT.STATUS = :iStatus ORDER BY EIP_USERMGT.FULLNAME";

        return sql;
    }

    public static string getUsersByRole()
    {
        string sql = "SELECT EIP_USERMGT.IDUSERMGT, EIP_USERMGT.USERNAME, EIP_USERMGT.FULLNAME, EIP_USERMGT.USERMAIL, EIP_USERMGT.USERROLESID, CPDMS_FUNCTIONS.FUNCTION, CPDMS_FUNCTIONS.FUNCTIONID, ";
        sql += "EIP_USERMGT.FLAG_COLOR, CPDMS_SHELLCOMPANIES.COMPANYNAME, CPDMS_SHELLCOMPANIES.COMPANYID, EIP_USERMGT.IDIPLIMIT, EIP_USERMGT.SYSADMINEXT, EIP_USERMGT.STATUS, EIP_USERMGT.EPNIGERIALOGIC ";
        sql += "FROM CPDMS_FUNCTIONS ";
        sql += "INNER JOIN EIP_USERMGT ON CPDMS_FUNCTIONS.FUNCTIONID = EIP_USERMGT.FUNCTIONID ";
        sql += "INNER JOIN CPDMS_SHELLCOMPANIES ON EIP_USERMGT.COMPANYID = CPDMS_SHELLCOMPANIES.COMPANYID ";
        sql += "WHERE EIP_USERMGT.USERROLESID = :USERROLESID AND EIP_USERMGT.STATUS = :STATUS ORDER BY EIP_USERMGT.FULLNAME";
        
        return sql;
    }

    public static string searchUser()
    {
        string sql = "SELECT EIP_USERMGT.IDUSERMGT, EIP_USERMGT.USERNAME, EIP_USERMGT.FULLNAME, EIP_USERMGT.USERMAIL, EIP_USERMGT.USERROLESID, CPDMS_FUNCTIONS.FUNCTION, CPDMS_FUNCTIONS.FUNCTIONID, ";
        sql += "EIP_USERMGT.FLAG_COLOR, CPDMS_SHELLCOMPANIES.COMPANYNAME, CPDMS_SHELLCOMPANIES.COMPANYID, EIP_USERMGT.IDIPLIMIT, EIP_USERMGT.SYSADMINEXT ";
        sql += "FROM CPDMS_FUNCTIONS INNER JOIN EIP_USERMGT ON CPDMS_FUNCTIONS.FUNCTIONID = EIP_USERMGT.FUNCTIONID ";
        sql += "INNER JOIN CPDMS_SHELLCOMPANIES ON EIP_USERMGT.COMPANYID = CPDMS_SHELLCOMPANIES.COMPANYID ";
        sql += "WHERE (upper(FULLNAME) LIKE :SEARCHKEY OR upper(USERNAME) LIKE :SEARCHKEY) AND EIP_USERMGT.STATUS = :STATUS";

        return sql;
    }

    public static string getRolesAcceptedOrPendingAcceptance()
    {
        string sql = "SELECT EIP_USERMGT.IDUSERMGT, EIP_USERMGT.USERNAME, EIP_USERMGT.FULLNAME, EIP_USERMGT.USERMAIL, EIP_USERMGT.USERROLESID, CPDMS_FUNCTIONS.FUNCTION, CPDMS_FUNCTIONS.FUNCTIONID, EIP_USERMGT.IDIPLIMIT, ";
        sql += "EIP_USERMGT.FLAG_COLOR, CPDMS_SHELLCOMPANIES.COMPANYNAME, CPDMS_SHELLCOMPANIES.COMPANYID, EIP_USERMGT.SYSADMINEXT, EIP_USERMGT.STATUS, EIP_USERMGT.EPNIGERIALOGIC ";
        sql += "FROM CPDMS_FUNCTIONS ";
        sql += "INNER JOIN EIP_USERMGT ON CPDMS_FUNCTIONS.FUNCTIONID = EIP_USERMGT.FUNCTIONID ";
        sql += "INNER JOIN CPDMS_SHELLCOMPANIES ON EIP_USERMGT.COMPANYID = CPDMS_SHELLCOMPANIES.COMPANYID ";
        sql += "WHERE EIP_USERMGT.STATUS = :STATUS ORDER BY EIP_USERMGT.FULLNAME";

        return sql;
    }

    public static string getAppUsers()
    {
        string sql = "SELECT IDUSERMGT, USERNAME, FULLNAME, USERMAIL, USERROLESID, FUNCTIONID, FLAG_COLOR, COMPANYID, SYSADMINEXT, STATUS, EPNIGERIALOGIC, IDIPLIMIT FROM EIP_USERMGT ";
        sql += " WHERE UPPER(FULLNAME) LIKE (:sFULLNAME)";

        return sql;
    }

    public static string GetAppUsersByIpLimitRangeOne()
    {
        string sql = "SELECT EIP_IPLIMIT.IDIPLIMIT, EIP_IPLIMIT.IPLIMIT, EIP_USERMGT.IDUSERMGT, EIP_USERMGT.USERNAME, EIP_USERMGT.FULLNAME, EIP_USERMGT.USERMAIL, ";
        sql += "EIP_USERMGT.FUNCTIONID, EIP_USERMGT.FLAG_COLOR, EIP_USERMGT.COMPANYID, EIP_USERMGT.STATUS, EIP_USERMGT.EPNIGERIALOGIC, EIP_USERMGT.USERROLESID, EIP_USERMGT.SYSADMINEXT ";
        sql += "FROM EIP_IPLIMIT ";
        sql += "INNER JOIN EIP_USERMGT ON EIP_IPLIMIT.IDIPLIMIT = EIP_USERMGT.IDIPLIMIT ";
        sql += "WHERE (EIP_USERMGT.USERROLESID = :USERROLESID) AND (EIP_USERMGT.STATUS = :STATUS) ORDER BY EIP_USERMGT.FULLNAME";

        // AND ((EIP_IPLIMIT.IPLIMIT * 100) >= :iSHELLSHARE)
        return sql;
    }

    public static string getAppUsersByIPLimitRangeTwoThreeFourFive()
    {
        string sql = "SELECT EIP_IPLIMIT.IDIPLIMIT, EIP_IPLIMIT.IPLIMIT, EIP_USERMGT.IDUSERMGT, EIP_USERMGT.USERNAME, EIP_USERMGT.FULLNAME, EIP_USERMGT.USERMAIL, ";
        sql += "EIP_USERMGT.FUNCTIONID, EIP_USERMGT.FLAG_COLOR, EIP_USERMGT.COMPANYID, EIP_USERMGT.STATUS, EIP_USERMGT.EPNIGERIALOGIC, EIP_USERMGT.USERROLESID, EIP_USERMGT.SYSADMINEXT ";
        sql += "FROM EIP_IPLIMIT INNER JOIN EIP_USERMGT ON EIP_IPLIMIT.IDIPLIMIT = EIP_USERMGT.IDIPLIMIT ";
        sql += "WHERE (EIP_USERMGT.USERROLESID = :USERROLESID) AND (EIP_USERMGT.STATUS = :STATUS) AND ((EIP_IPLIMIT.IPLIMIT * 100) >= :iSHELLSHARE) AND (EIP_IPLIMIT.SEQ >= :iSEQ)";

        return sql;       
    }

    public static string getDefaultUsersByRole()
    {
        string sql = "SELECT IDUSERMGT, USERNAME, FULLNAME, USERMAIL, USERROLESID, FUNCTIONID, FLAG_COLOR, COMPANYID, SYSADMINEXT, IDIPLIMIT, ";
        sql += "STATUS, EPNIGERIALOGIC FROM EIP_USERMGT WHERE USERROLESID = :USERROLESID AND STATUS = :STATUS AND FLAG_COLOR = :FLAG_COLOR ORDER BY FULLNAME";
        return sql;
    }

    public static string getUserByActiveDirectoryName()
    {
        string sql = "SELECT IDUSERMGT, USERNAME, FULLNAME, USERMAIL, USERROLESID, FUNCTIONID, FLAG_COLOR, COMPANYID, SYSADMINEXT, ";
        sql += "STATUS, EPNIGERIALOGIC, IDIPLIMIT FROM EIP_USERMGT WHERE lower(substr(USERMAIL, 1, instr(USERMAIL,'@')-1)) = lower(USERMAIL)";        
        return sql;
    }

    public static string getUserByUserId()
    {
        string sql = "SELECT IDUSERMGT, USERNAME, FULLNAME, USERMAIL, USERROLESID, FUNCTIONID, FLAG_COLOR, COMPANYID, SYSADMINEXT, STATUS, EPNIGERIALOGIC, IDIPLIMIT FROM EIP_USERMGT WHERE IDUSERMGT = :IDUSERMGT";
        return sql;
    }

    public static string getUserByUserName()
    {
        string sql = "SELECT IDUSERMGT, USERNAME, FULLNAME, USERMAIL, USERROLESID, FUNCTIONID, FLAG_COLOR, COMPANYID, SYSADMINEXT, STATUS, EPNIGERIALOGIC, IDIPLIMIT FROM EIP_USERMGT WHERE USERNAME = :USERNAME";
        return sql;
    }

    public static string getUserByDomainLoginId()
    {
        string sql = "SELECT IDUSERMGT, USERNAME, FULLNAME, USERMAIL, USERROLESID, FUNCTIONID, FLAG_COLOR, COMPANYID, SYSADMINEXT, STATUS, EPNIGERIALOGIC, IDIPLIMIT FROM EIP_USERMGT ";
        sql += "WHERE lower(substr(USERMAIL,1,instr(USERMAIL,'@')-1)) = lower(:sUserMail)";

        return sql;
    }

    public static string getUserByRoleId()
    {
        string sql = "SELECT IDUSERMGT, USERNAME, FULLNAME, USERMAIL, USERROLESID, FUNCTIONID, FLAG_COLOR, COMPANYID, SYSADMINEXT, ";
        sql += "STATUS, EPNIGERIALOGIC, IDIPLIMIT FROM EIP_USERMGT WHERE (USERROLESID = :USERROLESID) AND (STATUS = :STATUS)";
        return sql;
    }

    public static string CreateNewUser()
    {
        string sql = "INSERT INTO EIP_USERMGT(USERNAME, FULLNAME, USERMAIL, FUNCTIONID, USERROLESID, STATUS, EPNIGERIALOGIC, COMPANYID, IDIPLIMIT) ";
        sql += "VALUES (:USERNAME, :FULLNAME, :USERMAIL, :FUNCTIONID, :USERROLESID, :STATUS, :EPNIGERIALOGIC, :COMPANYID, :IDIPLIMIT)";

        return sql;
    }

    public static string UpdateUserProfile()
    {
        string sql = "UPDATE EIP_USERMGT SET USERNAME = :USERNAME, FUNCTIONID = :FUNCTIONID, USERROLESID = :USERROLESID, COMPANYID = :COMPANYID, ";
        sql += "EPNIGERIALOGIC = :EPNIGERIALOGIC, IDIPLIMIT = :IDIPLIMIT WHERE IDUSERMGT = :IDUSERMGT";

        return sql;
    }

    public static string DeleteUserProfile()
    {
        string sql = "UPDATE EIP_USERMGT SET STATUS = :STATUS WHERE IDUSERMGT = :IDUSERMGT";

        return sql;
    }
    

    public static string RoleAcceptance()
    {
        string sql = "UPDATE EIP_USERMGT SET STATUS = :STATUS WHERE IDUSERMGT = :IDUSERMGT";

        return sql;
    }

    #endregion


    public static string getUserByUserRoleCompany()
    {
        //SELECT IDUSERMGT, USERNAME, FULLNAME, USERMAIL, USERROLESID, FUNCTIONID, FLAG_COLOR, COMPANYID, IDIPLIMIT, SYSADMINEXT, STATUS, EPNIGERIALOGIC, IDIPLIMIT
        string sql = "SELECT IDUSERMGT, USERNAME, FULLNAME, USERMAIL, USERROLESID, FUNCTIONID, FLAG_COLOR, COMPANYID, IDIPLIMIT, SYSADMINEXT, STATUS, EPNIGERIALOGIC ";
        sql += "FROM EIP_USERMGT WHERE EIP_USERMGT.USERROLESID = :USERROLESID AND FLAG_COLOR = :FLAG_COLOR AND STATUS = :iStatus AND COMPANYID = :COMPANYID";

        return sql;
    }

    public static string EditProposal()
    {
        string sql = "UPDATE EIP_PROPOSAL SET PROJ_TITLE = :PROJ_TITLE, PROJ_DESC = :PROJ_DESC, EPPRIORITYID = :EPPRIORITYID, JV = :JV, IDUSERMGT = :IDUSERMGT, ";
        sql += "SS = :SS, DATE_LAST_ACTIONED = :DATE_LAST_ACTIONED, PROPOSALFILENAME = :PROPOSALFILENAME WHERE IDPROPOSAL = :IDPROPOSAL";

        return sql;
    }

    public static string EditProposalWithoutFileUpload()
    {
        string sql = "UPDATE EIP_PROPOSAL SET PROJ_TITLE = :PROJ_TITLE, PROJ_DESC = :PROJ_DESC, EPPRIORITYID = :EPPRIORITYID, JV = :JV, IDUSERMGT = :IDUSERMGT, ";
        sql += "SS = :SS, DATE_LAST_ACTIONED = :DATE_LAST_ACTIONED WHERE IDPROPOSAL = :IDPROPOSAL";

        return sql;
    }

    public static string getMainMenu()
    {
        string sql = "SELECT MENUID, TITLE, DESCRIPTION, NAVIGATEURL, PARENTID FROM EIP_MENU_BUILDER WHERE PARENTID IS NULL";
        return sql;
    }

    public static string getMenu()
    {
        string sql = "SELECT MENUID, TITLE, DESCRIPTION, NAVIGATEURL, PARENTID FROM EIP_MENU_BUILDER ORDER BY TITLE";
        return sql;
    }


    #region Proposal Management

    public static string GetProposalApprovalDetailsByRole()
    {
        string sql = "SELECT EIP_PROPOSAL.IDPROPOSAL, EIP_USERMGT.IDUSERMGT, EIP_USERMGT.FULLNAME, EIP_SUPPORTAPPROVERCOMMENTS.STAND, ";
        sql += "EIP_SUPPORTAPPROVERCOMMENTS.COMMENTS, TO_CHAR(EIP_SUPPORTAPPROVERCOMMENTS.DATE_COMMENT, 'DD-MON-YYYY')DATE_COMMENT, ";
        sql += "EIP_USERMGT.USERROLESID, EIP_SUPPORTAPPROVERCOMMENTS.SUPPORT_BIT, TO_CHAR(EIP_SUPPORTAPPROVERCOMMENTS.DATE_RECEIVED, 'DD-MON-YYYY')DATE_RECEIVED, ";
        sql += "EIP_PROPOSAL.IDPROPOSAL, EIP_SUPPORTAPPROVERCOMMENTS.IDCOMMENTS, EIP_PROPOSAL.PROJ_NUM, EIP_PROPOSAL.PROJ_TITLE, ";
        sql += "TO_CHAR(EIP_PROPOSAL.DATE_INIT, 'DD-MON-YYYY')DATE_INIT, EIP_PROPOSAL.JV, EIP_PROPOSAL.SS, TO_CHAR(EIP_PROPOSAL.DATE_SUBMIT, 'DD-MON-YYYY')DATE_SUBMIT, ";
        sql += "EIP_PROPOSAL.DOC_STAND FROM EIP_SUPPORTAPPROVERCOMMENTS, EIP_USERMGT, EIP_PROPOSAL ";
        sql += "WHERE EIP_SUPPORTAPPROVERCOMMENTS.IDUSERMGT = EIP_USERMGT.IDUSERMGT ";
        sql += "AND EIP_SUPPORTAPPROVERCOMMENTS.IDPROPOSAL = EIP_PROPOSAL.IDPROPOSAL ";
        sql += "AND EIP_PROPOSAL.IDPROPOSAL = :IDPROPOSAL AND EIP_USERMGT.USERROLESID = :USERROLESID";

        return sql;
    }

    public static string ProposalSupportApprovalDetails()
    {
        string sql = "SELECT EIP_USERMGT.FULLNAME, EIP_SUPPORTAPPROVERCOMMENTS.STAND, EIP_SUPPORTAPPROVERCOMMENTS.COMMENTS, ";
        sql += "TO_CHAR(EIP_SUPPORTAPPROVERCOMMENTS.DATE_COMMENT, 'DD-MON-YYYY')DATE_COMMENT, EIP_PROPOSAL.IDPROPOSAL, ";
        sql += "EIP_PROPOSAL.PROJ_NUM, EIP_PROPOSAL.PROJ_TITLE,  TO_CHAR(EIP_PROPOSAL.DATE_INIT, 'DD-MON-YYYY')DATE_INIT, ";
        sql += "EIP_PROPOSAL.JV, EIP_PROPOSAL.SS, EIP_PROPOSAL.INDICATOR, EIP_PROPOSAL.CPLAN, ";
        sql += "TO_CHAR(EIP_PROPOSAL.DATE_SUBMIT, 'DD-MON-YYYY')DATE_SUBMIT, EIP_PROPOSAL.CPLAN_STAND, EIP_PROPOSAL.CPLAN_COMMENT, ";
        sql += "EIP_PROPOSAL.LINE_COMMENT, TO_CHAR(EIP_PROPOSAL.CPLAN_DATE, 'DD-MON-YYYY')CPLAN_DATE, ";
        sql += "TO_CHAR(EIP_PROPOSAL.LINE_DATE, 'DD-MON-YYYY')LINE_DATE, EIP_PROPOSAL.BOM, EIP_PROPOSAL.DOC_STAND, ";
        sql += "EIP_PROPOSAL.LINE_STAND FROM EIP_SUPPORTAPPROVERCOMMENTS, EIP_USERMGT, EIP_PROPOSAL ";
        sql += "WHERE EIP_SUPPORTAPPROVERCOMMENTS.IDUSERMGT = EIP_USERMGT.IDUSERMGT ";
        sql += "AND EIP_SUPPORTAPPROVERCOMMENTS.IDPROPOSAL = EIP_PROPOSAL.IDPROPOSAL AND EIP_PROPOSAL.IDPROPOSAL = :IDPROPOSAL";

        return sql;
    }

    public static string UpdateProposal()
    {
        string sql = "UPDATE EIP_PROPOSAL SET PROJ_TITLE = :PROJ_TITLE, PROJ_DESC = :PROJ_DESC, EPPRIORITYID = :EPPRIORITYID, JV = :JV, ";
        sql += "SS = :SS, DATE_LAST_ACTIONED = :DATE_LAST_ACTIONED, PROPOSALFILENAME = :PROPOSALFILENAME WHERE IDPROPOSAL = :IDPROPOSAL";

        return sql;
    }

    public static string NoOfIPNotSupportedApproved()
    {
        string sql = "SELECT NSACOUNTER FROM EIP_PROPOSAL WHERE IDPROPOSAL = :IDPROPOSAL";
        return sql;
    }

    //public static string getIPValueRange()
    //{
    //    string sql = "SELECT IDRANGE, RANGEONE, RANGETWO, RANGETHREE, RANGEFOUR, RANGEFIVE FROM EIP_IPRANGE";
    //    return sql;
    //}

    //public static string UpdateIPValueRange()
    //{
    //    string sql = "UPDATE EIP_IPRANGE SET RANGEONE = :RANGEONE, RANGETWO = :RANGETWO, RANGETHREE = :RANGETHREE, RANGEFOUR = :RANGEFOUR, RANGEFIVE = :RANGEFIVE WHERE  IDRANGE = :IDRANGE";
    //    return sql;
    //}

    public static string getIPLimits()
    {
        string sql = "SELECT IDIPLIMIT, IPLIMIT, SEQ FROM EIP_IPLIMIT ORDER BY SEQ";
        return sql;
    }

    public static string UpdateIPLimit()
    {
        string sql = "UPDATE EIP_IPLIMIT SET IPLIMIT = :IPLIMIT, SEQ = :SEQ WHERE IDIPLIMIT = :IDIPLIMIT";
        return sql;
    }

    public static string AddIPLimit()
    {
        string sql = "INSERT INTO EIP_IPLIMIT (IPLIMIT, SEQ) VALUES (:IPLIMIT, :SEQ)";
        return sql;
    }

    public static string LockIP()
    {
        string sql = "UPDATE EIP_PROPOSAL SET DOC_STAND = :DOC_STAND WHERE IDPROPOSAL = :IDPROPOSAL";
        return sql;
    }

    #endregion

    #region************************** Staff Details from Information Ware House *******************

    public static string getUserByDomainLoginID()
    {
        //TODO: Possible SQL Injection attack. 
        string sql = "SELECT SURNAME, FIRST_NAME, FULL_NAME, REF_IND, JOB_POSITION, JOB_TITLE, USERNAME, EMAIL FROM " + AppConfiguration.InformationWareHouse;
        sql += " WHERE lower(substr(EMAIL,1,instr(EMAIL,'@')-1)) = lower(:sEmail)";

        return sql;
    }

    public static string CompleteStafDetailsByName()
    {
        string sql = "SELECT SURNAME, FIRST_NAME, FULL_NAME, REF_IND, JOB_POSITION, JOB_TITLE, USERNAME, EMAIL FROM " + AppConfiguration.InformationWareHouse;
        sql += " WHERE (upper(SURNAME) LIKE :SURNAME) OR (upper(FIRST_NAME) LIKE :SURNAME) AND USERNAME IS NOT NULL";

        return sql;
    }

    public static string CompleteStafDetailsByPrefix()
    {
        string sql = "SELECT SURNAME, FIRST_NAME, FULL_NAME, REF_IND, JOB_POSITION, JOB_TITLE, USERNAME, EMAIL FROM " + AppConfiguration.InformationWareHouse;
        sql += " WHERE (upper(SURNAME) LIKE :PREFIX) OR (upper(FIRST_NAME) LIKE :PREFIX) AND USERNAME IS NOT NULL";

        return sql;
    }

    public static string getUserFromCompleteStaffDetailsByUserName()
    {
        string sql = "SELECT SURNAME, FIRST_NAME, FULL_NAME, REF_IND, JOB_POSITION, JOB_TITLE, USERNAME, EMAIL FROM " + AppConfiguration.InformationWareHouse;
        sql += " WHERE upper(USERNAME) = :USERNAME";
        return sql;
    }

    public static string CompleteStafDetailsByStaffNumber()
    {
        string sql = "SELECT SURNAME, FIRST_NAME, FULL_NAME, REF_IND, JOB_POSITION, JOB_TITLE, USERNAME, EMAIL FROM " + AppConfiguration.InformationWareHouse;
        sql += " WHERE upper(STAFF_NUMBER) = :STAFF_NUMBER";
        return sql;
    }

    #endregion

    #region Functional Support and Approvers modules

    public static string getFunctionalSupportApproverComments()
    {
        string sql = "SELECT IDPROPOSAL, IDUSERMGT, USERROLESID, COMMENTS, TO_CHAR(DATE_COMMENT, 'DD-MON-YYYY')DATE_COMMENT, STAND, TO_CHAR(DATE_RECEIVED, 'DD-MON-YYYY')DATE_RECEIVED ";
        sql += "FROM EIP_SUPPORTAPPROVERCOMMENTS WHERE (IDPROPOSAL = :IDPROPOSAL)";

        return sql;
    }

    public static string getMandatoryFunctionalSupportApproverComments()
    {
        //string sql = "SELECT IDPROPOSAL, IDUSERMGT, USERROLESID, COMMENTS, TO_CHAR(DATE_COMMENT, 'DD-MON-YYYY')DATE_COMMENT, STAND, TO_CHAR(DATE_RECEIVED, 'DD-MON-YYYY')DATE_RECEIVED ";
        //sql += "FROM EIP_SUPPORTAPPROVERCOMMENTS WHERE (IDPROPOSAL = :IDPROPOSAL)";

        string sql = "SELECT EIP_SUPPORTAPPROVERCOMMENTS.IDPROPOSAL, EIP_SUPPORTAPPROVERCOMMENTS.IDUSERMGT, EIP_SUPPORTAPPROVERCOMMENTS.USERROLESID, EIP_SUPPORTAPPROVERCOMMENTS.COMMENTS, ";
        sql += "TO_CHAR(EIP_SUPPORTAPPROVERCOMMENTS.DATE_COMMENT, 'DD-MON-YYYY') DATE_COMMENT, EIP_SUPPORTAPPROVERCOMMENTS.STAND, ";
        sql += "TO_CHAR(EIP_SUPPORTAPPROVERCOMMENTS.DATE_RECEIVED, 'DD-MON-YYYY') DATE_RECEIVED FROM EIP_SUPPORTAPPROVERCOMMENTS ";
        sql += "INNER JOIN EIP_USERROLES ON EIP_SUPPORTAPPROVERCOMMENTS.USERROLESID = EIP_USERROLES.USERROLESID WHERE EIP_SUPPORTAPPROVERCOMMENTS.IDPROPOSAL = :IDPROPOSAL ";
        sql += "AND EIP_USERROLES.MANDATORY = 1";

        return sql;
    }

    public static string getFunctionalSupportApproverCommentByUserId()
    {
        string sql = "SELECT IDPROPOSAL, IDUSERMGT, USERROLESID, COMMENTS, TO_CHAR(DATE_COMMENT, 'DD-MON-YYYY')DATE_COMMENT, STAND, TO_CHAR(DATE_RECEIVED, 'DD-MON-YYYY')DATE_RECEIVED ";
        sql += "FROM EIP_SUPPORTAPPROVERCOMMENTS WHERE (IDPROPOSAL = :IDPROPOSAL) AND (IDUSERMGT = :IDUSERMGT)";

        return sql;
    }

    public static string getFunctionalSupportApproverCommentByRoleId()
    {
        string sql = "SELECT IDPROPOSAL, IDUSERMGT, USERROLESID, COMMENTS, TO_CHAR(DATE_COMMENT, 'DD-MON-YYYY')DATE_COMMENT, STAND, TO_CHAR(DATE_RECEIVED, 'DD-MON-YYYY')DATE_RECEIVED ";
        sql += "FROM EIP_SUPPORTAPPROVERCOMMENTS WHERE (IDPROPOSAL = :IDPROPOSAL) AND (USERROLESID = :USERROLESID)";

        return sql;
    }

    #endregion
}
