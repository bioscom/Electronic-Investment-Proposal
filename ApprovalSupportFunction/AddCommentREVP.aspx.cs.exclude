using System;
using System.Data;
using System.Web.UI;

public partial class ApprovalSupportFunction_AddCommentREVP : CustomBasePage
{
   
    SendMail MyMail = new SendMail();
    Proposal proposal = new Proposal();
    //IPInitiator IPInit = new IPInitiator();
    ProposalMgt core = new ProposalMgt();
    appUsers CurrentUser = new appUsers();
    //shellCompanies theCompany = new shellCompanies();
    TimeDateCulture dateCulture = new TimeDateCulture();
    ////BusinessProcessOwner BPO = new BusinessProcessOwner();
    IPUpdateReloadProcedure IPUpdate = new IPUpdateReloadProcedure();
    SupportApprovalStatus SupportApproval = new SupportApprovalStatus();
  
    string mSubject = "";
    string[] SenderMail = { "" };
    string[] IPInitiatorMail = { "" };
    string[] BPOMail = { "" };
    string[] EPGIPTrackerMail = { "" };
    bool success = false;

    protected void Page_Load(object sender, EventArgs e)
    {
        try
        {
            if (Request.QueryString["Proposalid"] != null)
            {
                proposal = new Proposal(Request.QueryString["Proposalid"].ToString());
                CurrentUser = new appUsers(Apps.LoginIDNoDomain(User.Identity.Name));

                DateRevTextBox.Text = dateCulture.GetTodaysDateInBritishFormat();
                mSubject = proposal.PROJ_TITLE;

                //Get the IP Reviewer's Information
                SenderMail[0] = CurrentUser.sUSERMAIL;
                IPInitiator IPInit = new IPInitiator(proposal.IDUSERMGT);
                IPInitiatorMail[0] = IPInit.sUserMail;   //db.GetIPInitiatorEmailAddressByProposalID(proposal.IDPROPOSAL);
                BusinessProcessOwner BPO = new BusinessProcessOwner(IPInit.iCompanyID);
                BPOMail[0] = BPO.sUserMail;

                if (!IsPostBack)
                {
                    REVPComments MyCommment = new REVPComments();
                    MyCommment = new REVPComments(proposal.IDPROPOSAL);

                    SupportLabel.Text = "Regional Vice President"; //eipUserRoles.REVP;
                    CommentTextBox.Text = MyCommment.sCOMMENTS;
                    projTitleLabel.Text = proposal.PROJ_NUM + " <--> " + proposal.PROJ_TITLE;

                    //SupportStandDropDownList.Items.Clear();
                    db.FillDBLByValue2(SupportStandDropDownList, SupportState.iApproved.ToString(), SupportState.Approved);
                    db.FillDBLByValue2(SupportStandDropDownList, SupportState.iNotApproved.ToString(), SupportState.NotApproved);
                }
            }
        }
        catch (Exception ex)
        {
            //MessageBox.Show(ex.Message.ToString());
            System.Diagnostics.Debug.Fail(ex.TargetSite.Name + "\n \n" + ex.StackTrace + "\n \n" + ex.Message.ToString());
        }

        digiSignButton.Attributes.Add("onclick", "return CenteredPopup('DigitalSignature.aspx?ProposalID=" + proposal.IDPROPOSAL + "','MyWindowForm','550','230','yes');return false");

    }

    protected void forwardButton_Click(object sender, EventArgs e)
    {
        if ((CommentTextBox.Text == "") && (SupportStandDropDownList.SelectedValue == SupportState.iNotApproved.ToString()))
        {
            MessageBox.Show("Please, enter reason(s) why Not Approved in the comment box.");
        }
        else
        {
            int stand = Convert.ToInt32(SupportStandDropDownList.SelectedValue);

            string comment = "";
            if (CommentTextBox.Text != "") { comment = CommentTextBox.Text.Replace("'", "''"); }
            else { comment = null; }

            REVPComments.REVPAddCommentProcudure(CurrentUser, proposal, comment, stand, DateTime.Today.Date.ToShortDateString());

            UpdateREVPComments(stand, comment);
        }
    }

    private void UpdateREVPComments(int stand, string comment)
    {
        if (stand == SupportState.iApproved)
        {
            //Update the DOC_STAND to show that the IP approval process for the IP has been COMPLETED
            db.UpdateDOCSTAND(proposal.IDPROPOSAL);

            //Send Mail to IP Initiator, and copy BPO that REVP has approved the Proposal
            success = MyMail.ProposalApproved(IPInitiatorMail, SenderMail[0], mSubject, BPOMail[0], ApplicationURL.MyAppURL(), proposal.PROJ_NUM);

            //Mail EPG IP Tracker
            MailEPGIPTracker();
            MessageBox.Show("Proposal successfully approved. \n\nIP Initiator, EPG IP Tracker and Business Process Owner have been notified, \nthank you very much.");
            Response.Redirect("~/ApprovalSupportFunction/PendingProposal.aspx");
        }
        else
        {
            //Proposal Not Supported or Approved
            //Run IPUpdate Procedure
            proposal.ProposalNotSupported(proposal, CurrentUser, mSubject, comment);

            MessageBox.Show("Proposal Not Approved, IP Initiator and Business Process Owner have been notified.");

            //Mail EPG IP Tracker
            MailEPGIPTracker();
        }
    }

    private void MailEPGIPTracker()
    {
        bool IPValueGrterThan20 = SupportApproval.IPLessThan3rdQuartile(proposal);
        if (IPValueGrterThan20 == false)
        {
            EPGIPTrackerMail[0] = db.GetEPGIPTrackerEmail();
            bool EPGIPTrackerSuccess = MyMail.mailEPGIPTrackerOnIPUpdate(EPGIPTrackerMail, CurrentUser.sUSERMAIL, proposal.PROJ_NUM, mSubject, ApplicationURL.MyAppURL(), proposal.IDPROPOSAL);
        }
    }

    protected void closeButton_Click(object sender, EventArgs e)
    {
        Response.Redirect("~/ApprovalSupportFunction/PendingProposal.aspx");
    }

    //Digital Signatures Code
    protected void digiSignImgBtn_Click(object sender, ImageClickEventArgs e)
    {
        WriteFile MyFile = new WriteFile();

        try
        {
            //Proposal proposal = new Proposal(proposal.IDPROPOSAL);
            byte[] MyData = MyFile.DownLoadProposal(proposal.ProposalFileName);

            Response.Clear();
            Response.ContentType = "application/pdf";
            Response.AddHeader("content-disposition", "attachment;filename=Proposal.pdf");
            Response.AddHeader("Content-Length", Convert.ToString(MyData.Length));
            Response.BinaryWrite(MyData);
            Response.End();
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.Fail(ex.TargetSite.Name + "\n \n" + ex.StackTrace + "\n \n" + ex.Message.ToString());
        }
    }

    protected void uploadButton_Click(object sender, EventArgs e)
    {
       

        //Proposal proposal = new Proposal(ProposalID);
        SaveIP2FileSystem UpLoadMe = new SaveIP2FileSystem();
        string sFileName = UpLoadMe.UploadInvestmentProposal(UploadProposal, proposal);
        if (sFileName != "")
        {
            //Please you have to save this newly generated filename into PROPOSALFILENAME field in EIP_PROPOSAL table.
            string sql = "UPDATE EIP_PROPOSAL SET PROPOSALFILENAME = '" + sFileName + "' WHERE IDPROPOSAL = '" + proposal.IDPROPOSAL + "'";
            DataAccess.ExecuteNonQueryCommand(sql);
            MessageBox.Show("Proposal successfully attached.");
        }
    }
}