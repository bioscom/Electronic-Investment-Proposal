using System;
using System.Data;
using System.Web.UI.WebControls;


public partial class ApprovalSupportFunction_MyComments : CustomBasePage
{
   
    Proposal proposal = new Proposal();
    public string loginUserID;
    public string ProposalID = "";

    protected void Page_Load(object sender, EventArgs e)
    {
        if (Request.QueryString["ProposalID"] != null)
        {
            ProposalID = Request.QueryString["ProposalID"];
        }

        if (!IsPostBack)
        {
            appUsers CurrentUser = new appUsers(Apps.LoginIDNoDomain(User.Identity.Name));
            proposal = new Proposal(ProposalID);
            //FunctionalSupportComments MyComment = new FunctionalSupportComments(proposal.IDPROPOSAL, CurrentUser.iIDUSERMGT);

            //Project Information
            projNumberLabel.Text = proposal.PROJ_NUM; projTitleLabel.Text = proposal.PROJ_TITLE; initiatorLabel.Text = proposal.PROJ_INIT;
            dateInitLabel.Text = proposal.DATE_INIT; dateSubmitLabel.Text = proposal.DATE_SUBMIT; AmountJVLabel.Text = proposal.JV;
            AmountSSLabel.Text = proposal.SS;

            DataTable ds = new DataTable();
            if (CurrentUser.iUSERROLESID == eipUserRoles.iLineTeamLead)
            {
                LineTeamLeadComments ltl = new LineTeamLeadComments();
                ds = ltl.GetMyComment(ProposalID, CurrentUser.iIDUSERMGT.ToString());
            }
            else if (CurrentUser.iUSERROLESID == eipUserRoles.iBusinessProcessOwner)
            {
                BPOComments BPO = new BPOComments();
                ds = BPO.GetMyComment(ProposalID, CurrentUser.iIDUSERMGT.ToString());
            }
            else if (CurrentUser.iUSERROLESID == eipUserRoles.iGMRegionalPlanning)
            {
                GMREPLANComments GMREPLAN = new GMREPLANComments();
                ds = GMREPLAN.GetMyComment(ProposalID, CurrentUser.iIDUSERMGT.ToString());
            }
            else if (CurrentUser.iUSERROLESID == eipUserRoles.iFinanceSignature)
            {
                FinanceSignatureComments FinSig = new FinanceSignatureComments();
                ds = FinSig.GetMyComment(ProposalID, CurrentUser.iIDUSERMGT.ToString());
            }
            else if (CurrentUser.iUSERROLESID == eipUserRoles.iREVP)
            {
                REVPComments REVP = new REVPComments();
                ds = REVP.GetMyComment(ProposalID, CurrentUser.iIDUSERMGT.ToString());
            }
            else if ((CurrentUser.iUSERROLESID == eipUserRoles.iVP) && (CurrentUser.Function != cpdmsFunctionsNames.Finance))
            {
                VPComments VP = new VPComments();
                ds = VP.GetMyComment(ProposalID, CurrentUser.iIDUSERMGT.ToString());
            }
            else if ((CurrentUser.iUSERROLESID == eipUserRoles.iVP) && (CurrentUser.Function == cpdmsFunctionsNames.Finance))
            {
                VPFinanceComments VPFin = new VPFinanceComments();
                ds = VPFin.GetMyComment(ProposalID, CurrentUser.iIDUSERMGT.ToString());
            }
            else if (CurrentUser.iUSERROLESID == eipUserRoles.iMD)
            {
                MDComments MD = new MDComments();
                ds = MD.GetMyComment(ProposalID, CurrentUser.iIDUSERMGT.ToString());
            }
            else if ((CurrentUser.iUSERROLESID == eipUserRoles.iGM) && (CurrentUser.Function == cpdmsFunctionsNames.Finance))
            {
                GMFinanceComments GMFiN = new GMFinanceComments();
                ds = GMFiN.GetMyComment(ProposalID, CurrentUser.iIDUSERMGT.ToString());
            }
            else if ((CurrentUser.iUSERROLESID == eipUserRoles.iGM) && (CurrentUser.Function != cpdmsFunctionsNames.Finance))
            {
                GMComments GM = new GMComments();
                ds = GM.GetMyComment(ProposalID, CurrentUser.iIDUSERMGT.ToString());
            }
            else if (CurrentUser.iUSERROLESID == eipUserRoles.iCorporatePlanningManager)
            {
                CorporatePlanningManager cpm = new CorporatePlanningManager();
                ds = cpm.GetMyComment(ProposalID, CurrentUser.iIDUSERMGT.ToString());
            }
            else
            {
                //For Support Functions and others
                SupportApproverComments FuncSupport = new SupportApproverComments();
                ds = FuncSupport.GetMyComment(ProposalID, CurrentUser.iIDUSERMGT.ToString());
            }

            if (ds.Rows.Count > 0)
            {
                MyCommentsGridView.DataSource = ds;
                MyCommentsGridView.DataBind();

                foreach (GridViewRow grdRow in MyCommentsGridView.Rows)
                {
                    Label stand = (Label)MyCommentsGridView.Rows[grdRow.RowIndex].FindControl("labelStand");
                    stand.Font.Bold = true;

                    if (Convert.ToInt32(stand.Text) == SupportState.iSupported)
                    {
                        stand.ForeColor = System.Drawing.Color.Green;
                        stand.Text = SupportState.Supported;
                    }
                    else if (Convert.ToInt32(stand.Text) == SupportState.iApproved)
                    {
                        stand.ForeColor = System.Drawing.Color.Green;
                        stand.Text = SupportState.Approved;
                    }
                    else if (Convert.ToInt32(stand.Text) == SupportState.iNotSupported)
                    {
                        stand.ForeColor = System.Drawing.Color.Red;
                        stand.Text = SupportState.NotSupported;
                    }
                    else if (Convert.ToInt32(stand.Text) == SupportState.iNotApproved)
                    {
                        stand.ForeColor = System.Drawing.Color.Red;
                        stand.Text = SupportState.NotApproved;
                    }
                    else
                    {
                        stand.Text = "";
                    }
                }
            }
            else
            {

            }
        }
    }

    protected void backButton_Click(object sender, EventArgs e)
    {
        Response.Redirect("~/ApprovalSupportFunction/Proposals.aspx");
    }
}